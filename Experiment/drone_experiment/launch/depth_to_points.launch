<launch>
	<arg name="depth_image_proc" default="false"/>

	<arg name="object_link_name" default="camera_link"/>
	<arg name="frame_name" default="world"/>
	<arg name="sensor_max_range" default="4.0"/>
	<arg name="max_ground_height" default="0.1" />
	<arg name="resolution" default="0.1" />
	<arg name="data_type" default="3" /> <!-- 1:<sensor_msgs::LaserScan>,2:<sensor_msgs::PointCloud2>,3:<sensor_msgs::Image> -->
	<arg name="is_rgbd" default="0" /> <!-- 0: 3dLidar; 1: rgbd camera-->
	<arg name="cut_edge" default="1" /> <!-- if data_type==3 -->
	<arg name="interval" default="1" /> <!-- if data_type==3 -->
	<arg name="dist_min" default="0.1" /> <!-- if data_type==3 -->
	<arg name="dep_camera_info" default="/camera/depth/camera_info"/>    <!-- if data_type == 3 -->
	<arg name="dep_img_rect" default="/camera/depth/image_rect_raw" /> <!-- if data_type == 3 -->
	<arg name="rgb_camera_info" value="/camera/color/camera_info"/>
	<arg name="rgb_img_rect" value="/camera/color/image_raw"/>  <!--Rectified color image-->
	
	<arg name="points_out" default="/camera/local_pointclouds" />
	
	<!-- depth to pcl : Points_filter.cpp -->
	<node unless="$(arg depth_image_proc)" pkg="points_filter" name="points_filter_main" type="points_filter_main" output="screen">
		<!-- 1:<sensor_msgs::LaserScan>,2:<sensor_msgs::PointCloud2>,3:<sensor_msgs::Image> -->
		<param name="points_filter/data_type" value="$(arg data_type)" type="int"/>
		<param name="points_filter/frame_name" value="$(arg frame_name)" type="string"/>
		<param name="points_filter/object_link_name" value="$(arg object_link_name)" type="string"/>
		<!-- Sensory distance, considering only obstacles within sensory distance -->
		<param name="points_filter/sensor_max_range" value="$(arg sensor_max_range)" type="double"/>
		<param name="points_filter/ground_removal" value="false" type="bool"/>
		<param name="points_filter/downsampling" value="false" type="bool"/>
		<param name="points_filter/spatial" value="false" type="bool"/>
		<param name="points_filter/concatenate" value="false" type="bool"/>
		<param name="points_filter/ground_height" value="$(arg max_ground_height)" type="double"/>
		<param name="points_filter/resolution" value="$(arg resolution)" type="double"/>
		<!-- if data_type < 3 -->
		<param name="points_filter/is_lidar" value="$(eval arg('is_rgbd') == 0)" type="bool"/>
		<param name="points_filter/is_rgbd" value="$(eval arg('is_rgbd') == 1)" type="bool"/>
		<remap from="/points_filter/sensor" to="$(arg points_out)" />
		<!-- if data_type == 3 -->
		<remap from="/camera/depth/image_rect_raw" to="$(arg dep_img_rect)" />
		<remap from="/camera/depth/camera_info" to="$(arg dep_camera_info)" />
		<param name="points_filter/fx" value="231.06897487523196" type="double"/>
		<param name="points_filter/fy" value="231.06897487523196" type="double"/>
		<param name="points_filter/cx" value="160.5" type="double"/>
		<param name="points_filter/cy" value="120.5" type="double"/>
		<param name="points_filter/dist_min" value="$(arg dist_min)" type="double"/>
		<param name="points_filter/cut_edge" value="$(arg cut_edge)" type="int"/>
		<param name="points_filter/interval" value="$(arg interval)" type="int"/>
	</node>
	
	<group if="$(arg depth_image_proc)">
		<node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />

		<!-- Convert depth from mm (in uint16) to meters -->
		<node if="false" pkg="nodelet" type="nodelet" name="convert_metric" args="load depth_image_proc/convert_metric standalone_nodelet">
			<remap from="image_raw" to="$(arg dep_img_rect)"/>
			<remap from="image" to="$(arg dep_img_rect)"/>
		</node>
		<!-- Construct point cloud of the rgb and depth topics -->
		<node if="false" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
			<remap from="rgb/camera_info" to="$(arg rgb_camera_info)" />
			<remap from="rgb/image_rect_color" to="$(arg rgb_img_rect)"/>
			<remap from="depth_registered/image_rect" to="$(arg dep_img_rect)"/>
			<remap from="depth_registered/points" to="$(arg out_cloud)"/>
		</node>
		<!-- Construct point cloud of the depth topics -->
		<node pkg="nodelet" type="nodelet" name="nodelet1"
			args="load depth_image_proc/point_cloud_xyz nodelet_manager">
			<remap from="camera_info" to="$(arg dep_camera_info)"/>
			<remap from="image_rect" to="$(arg dep_img_rect)"/>
			<remap from="points" to="$(arg points_out)"/>
		</node>
	</group>
	
</launch>
