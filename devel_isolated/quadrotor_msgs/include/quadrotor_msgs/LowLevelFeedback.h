// Generated by gencpp from file quadrotor_msgs/LowLevelFeedback.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_LOWLEVELFEEDBACK_H
#define QUADROTOR_MSGS_MESSAGE_LOWLEVELFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct LowLevelFeedback_
{
  typedef LowLevelFeedback_<ContainerAllocator> Type;

  LowLevelFeedback_()
    : header()
    , battery_voltage(0.0)
    , battery_state(0)
    , control_mode(0)
    , motor_speeds()
    , thrust_mapping_coeffs()  {
    }
  LowLevelFeedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , battery_voltage(0.0)
    , battery_state(0)
    , control_mode(0)
    , motor_speeds(_alloc)
    , thrust_mapping_coeffs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef uint8_t _battery_state_type;
  _battery_state_type battery_state;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _motor_speeds_type;
  _motor_speeds_type motor_speeds;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _thrust_mapping_coeffs_type;
  _thrust_mapping_coeffs_type thrust_mapping_coeffs;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BAT_INVALID)
  #undef BAT_INVALID
#endif
#if defined(_WIN32) && defined(BAT_GOOD)
  #undef BAT_GOOD
#endif
#if defined(_WIN32) && defined(BAT_LOW)
  #undef BAT_LOW
#endif
#if defined(_WIN32) && defined(BAT_CRITICAL)
  #undef BAT_CRITICAL
#endif
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(ATTITUDE)
  #undef ATTITUDE
#endif
#if defined(_WIN32) && defined(BODY_RATES)
  #undef BODY_RATES
#endif
#if defined(_WIN32) && defined(ANGULAR_ACCELERATION)
  #undef ANGULAR_ACCELERATION
#endif
#if defined(_WIN32) && defined(ROTOR_THRUSTS)
  #undef ROTOR_THRUSTS
#endif
#if defined(_WIN32) && defined(RC_MANUAL)
  #undef RC_MANUAL
#endif

  enum {
    BAT_INVALID = 0u,
    BAT_GOOD = 1u,
    BAT_LOW = 2u,
    BAT_CRITICAL = 3u,
    NONE = 0u,
    ATTITUDE = 1u,
    BODY_RATES = 2u,
    ANGULAR_ACCELERATION = 3u,
    ROTOR_THRUSTS = 4u,
    RC_MANUAL = 10u,
  };


  typedef boost::shared_ptr< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct LowLevelFeedback_

typedef ::quadrotor_msgs::LowLevelFeedback_<std::allocator<void> > LowLevelFeedback;

typedef boost::shared_ptr< ::quadrotor_msgs::LowLevelFeedback > LowLevelFeedbackPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::LowLevelFeedback const> LowLevelFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.battery_state == rhs.battery_state &&
    lhs.control_mode == rhs.control_mode &&
    lhs.motor_speeds == rhs.motor_speeds &&
    lhs.thrust_mapping_coeffs == rhs.thrust_mapping_coeffs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3cfad3ba98dfdc505bcf1fe91833d87";
  }

  static const char* value(const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3cfad3ba98dfdc5ULL;
  static const uint64_t static_value2 = 0x05bcf1fe91833d87ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/LowLevelFeedback";
  }

  static const char* value(const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# battery state enums\n"
"uint8 BAT_INVALID=0\n"
"uint8 BAT_GOOD=1\n"
"uint8 BAT_LOW=2\n"
"uint8 BAT_CRITICAL=3\n"
"\n"
"# control mode enums as defined in ControlCommand.msg\n"
"uint8 NONE=0\n"
"uint8 ATTITUDE=1\n"
"uint8 BODY_RATES=2\n"
"uint8 ANGULAR_ACCELERATION=3\n"
"uint8 ROTOR_THRUSTS=4\n"
"# Additionally to the control command we want to know whether an RC has taken\n"
"# over from the low level feedback\n"
"uint8 RC_MANUAL=10\n"
"\n"
"Header header\n"
"\n"
"# Battery information\n"
"float32 battery_voltage\n"
"uint8 battery_state\n"
"\n"
"# Control mode as defined above\n"
"uint8 control_mode\n"
"\n"
"# Motor speed feedback [rpm]\n"
"int16[] motor_speeds\n"
"\n"
"# Thrust mapping coefficients\n"
"# thrust = thrust_mapping_coeffs[2] * u^2 + thrust_mapping_coeffs[1] * u +\n"
"#     thrust_mapping_coeffs[0]\n"
"float64[] thrust_mapping_coeffs\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.battery_voltage);
      stream.next(m.battery_state);
      stream.next(m.control_mode);
      stream.next(m.motor_speeds);
      stream.next(m.thrust_mapping_coeffs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowLevelFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_state);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "motor_speeds[]" << std::endl;
    for (size_t i = 0; i < v.motor_speeds.size(); ++i)
    {
      s << indent << "  motor_speeds[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.motor_speeds[i]);
    }
    s << indent << "thrust_mapping_coeffs[]" << std::endl;
    for (size_t i = 0; i < v.thrust_mapping_coeffs.size(); ++i)
    {
      s << indent << "  thrust_mapping_coeffs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.thrust_mapping_coeffs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_LOWLEVELFEEDBACK_H
