// Generated by gencpp from file quadrotor_msgs/Trajectory.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_TRAJECTORY_H
#define QUADROTOR_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <quadrotor_msgs/TrajectoryPoint.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : header()
    , type(0)
    , points()  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _type_type;
  _type_type type;

   typedef std::vector< ::quadrotor_msgs::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::quadrotor_msgs::TrajectoryPoint_<ContainerAllocator> >> _points_type;
  _points_type points;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNDEFINED)
  #undef UNDEFINED
#endif
#if defined(_WIN32) && defined(GENERAL)
  #undef GENERAL
#endif
#if defined(_WIN32) && defined(ACCELERATION)
  #undef ACCELERATION
#endif
#if defined(_WIN32) && defined(JERK)
  #undef JERK
#endif
#if defined(_WIN32) && defined(SNAP)
  #undef SNAP
#endif

  enum {
    UNDEFINED = 0u,
    GENERAL = 1u,
    ACCELERATION = 2u,
    JERK = 3u,
    SNAP = 4u,
  };


  typedef boost::shared_ptr< ::quadrotor_msgs::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::quadrotor_msgs::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::quadrotor_msgs::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::Trajectory_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::Trajectory_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18a34f2514fbc4cc1b109ed1c473a1d8";
  }

  static const char* value(const ::quadrotor_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18a34f2514fbc4ccULL;
  static const uint64_t static_value2 = 0x1b109ed1c473a1d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/Trajectory";
  }

  static const char* value(const ::quadrotor_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Trajectory type enums\n"
"\n"
"# Undefined trajectory type\n"
"uint8 UNDEFINED=0\n"
"\n"
"# General trajectory type that considers orientation from the pose and\n"
"# neglects heading values\n"
"uint8 GENERAL=1\n"
"\n"
"# Trajectory types that compute orientation from acceleration and heading\n"
"# values and consider derivatives up to what is indicated by the name\n"
"uint8 ACCELERATION=2\n"
"uint8 JERK=3\n"
"uint8 SNAP=4\n"
"\n"
"Header header\n"
"\n"
"# Trajectory type as defined above\n"
"uint8 type\n"
"\n"
"quadrotor_msgs/TrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/TrajectoryPoint\n"
"duration time_from_start\n"
"\n"
"geometry_msgs/Pose pose\n"
"\n"
"geometry_msgs/Twist velocity\n"
"\n"
"geometry_msgs/Twist acceleration\n"
"\n"
"geometry_msgs/Twist jerk\n"
"\n"
"geometry_msgs/Twist snap\n"
"\n"
"# Heading angle with respect to world frame [rad]\n"
"float64 heading\n"
"\n"
"# First derivative of the heading angle [rad/s]\n"
"float64 heading_rate\n"
"\n"
"# Second derivative of the heading angle [rad/s^2]\n"
"float64 heading_acceleration\n"
"\n"
"# Collective thrust [m/s^2]\n"
"float64 thrust\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_TRAJECTORY_H
