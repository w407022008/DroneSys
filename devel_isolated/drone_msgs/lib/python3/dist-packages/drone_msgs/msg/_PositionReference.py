# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/PositionReference.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import drone_msgs.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg

class PositionReference(genpy.Message):
  _md5sum = "d029a5a9568f27a7cd91ef81b8f15a11"
  _type = "drone_msgs/PositionReference"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## Setpoint position reference for PX4 Control

## Setpoint Mode
uint8 Move_mode

uint8 XYZ_POS      = 0  ##0b00
uint8 XY_POS_Z_VEL = 1  ##0b01
uint8 XY_VEL_Z_POS = 2  ##0b10
uint8 XYZ_VEL = 3       ##0b11
uint8 XYZ_ACC = 4
uint8 XYZ_POS_VEL   = 5  
uint8 TRAJECTORY   = 6

## Reference Frame
uint8 Move_frame

uint8 ENU_FRAME  = 0
uint8 BODY_FRAME = 1



## Tracking life
float32 time_from_start          ## [s]

float32[3] position_ref          ## [m]
float32[3] velocity_ref          ## [m/s]
float32[3] acceleration_ref      ## [m/s^2]

bool Yaw_Rate_Mode                      ## True 代表控制偏航角速率
float32 yaw_ref                  ## [rad]
float32 yaw_rate_ref             ## [rad/s] 

Bspline bspline
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: drone_msgs/Bspline
int32 order                 ## 
int64 traj_id               ## id of trajecotry
float64[] knots             ## knots list
geometry_msgs/Point[] pts   ## control points list
time start_time             ## time stamp


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  XYZ_POS = 0
  XY_POS_Z_VEL = 1
  XY_VEL_Z_POS = 2
  XYZ_VEL = 3
  XYZ_ACC = 4
  XYZ_POS_VEL = 5
  TRAJECTORY = 6
  ENU_FRAME = 0
  BODY_FRAME = 1

  __slots__ = ['header','Move_mode','Move_frame','time_from_start','position_ref','velocity_ref','acceleration_ref','Yaw_Rate_Mode','yaw_ref','yaw_rate_ref','bspline']
  _slot_types = ['std_msgs/Header','uint8','uint8','float32','float32[3]','float32[3]','float32[3]','bool','float32','float32','drone_msgs/Bspline']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Move_mode,Move_frame,time_from_start,position_ref,velocity_ref,acceleration_ref,Yaw_Rate_Mode,yaw_ref,yaw_rate_ref,bspline

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionReference, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Move_mode is None:
        self.Move_mode = 0
      if self.Move_frame is None:
        self.Move_frame = 0
      if self.time_from_start is None:
        self.time_from_start = 0.
      if self.position_ref is None:
        self.position_ref = [0.] * 3
      if self.velocity_ref is None:
        self.velocity_ref = [0.] * 3
      if self.acceleration_ref is None:
        self.acceleration_ref = [0.] * 3
      if self.Yaw_Rate_Mode is None:
        self.Yaw_Rate_Mode = False
      if self.yaw_ref is None:
        self.yaw_ref = 0.
      if self.yaw_rate_ref is None:
        self.yaw_rate_ref = 0.
      if self.bspline is None:
        self.bspline = drone_msgs.msg.Bspline()
    else:
      self.header = std_msgs.msg.Header()
      self.Move_mode = 0
      self.Move_frame = 0
      self.time_from_start = 0.
      self.position_ref = [0.] * 3
      self.velocity_ref = [0.] * 3
      self.acceleration_ref = [0.] * 3
      self.Yaw_Rate_Mode = False
      self.yaw_ref = 0.
      self.yaw_rate_ref = 0.
      self.bspline = drone_msgs.msg.Bspline()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.Move_mode, _x.Move_frame, _x.time_from_start))
      buff.write(_get_struct_3f().pack(*self.position_ref))
      buff.write(_get_struct_3f().pack(*self.velocity_ref))
      buff.write(_get_struct_3f().pack(*self.acceleration_ref))
      _x = self
      buff.write(_get_struct_B2fiq().pack(_x.Yaw_Rate_Mode, _x.yaw_ref, _x.yaw_rate_ref, _x.bspline.order, _x.bspline.traj_id))
      length = len(self.bspline.knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.bspline.knots))
      length = len(self.bspline.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.bspline.pts:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2I().pack(_x.bspline.start_time.secs, _x.bspline.start_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bspline is None:
        self.bspline = drone_msgs.msg.Bspline()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.Move_mode, _x.Move_frame, _x.time_from_start,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 12
      self.position_ref = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity_ref = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.acceleration_ref = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 21
      (_x.Yaw_Rate_Mode, _x.yaw_ref, _x.yaw_rate_ref, _x.bspline.order, _x.bspline.traj_id,) = _get_struct_B2fiq().unpack(str[start:end])
      self.Yaw_Rate_Mode = bool(self.Yaw_Rate_Mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bspline.knots = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bspline.pts = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bspline.pts.append(val1)
      _x = self
      start = end
      end += 8
      (_x.bspline.start_time.secs, _x.bspline.start_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.Move_mode, _x.Move_frame, _x.time_from_start))
      buff.write(self.position_ref.tostring())
      buff.write(self.velocity_ref.tostring())
      buff.write(self.acceleration_ref.tostring())
      _x = self
      buff.write(_get_struct_B2fiq().pack(_x.Yaw_Rate_Mode, _x.yaw_ref, _x.yaw_rate_ref, _x.bspline.order, _x.bspline.traj_id))
      length = len(self.bspline.knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.bspline.knots.tostring())
      length = len(self.bspline.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.bspline.pts:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2I().pack(_x.bspline.start_time.secs, _x.bspline.start_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bspline is None:
        self.bspline = drone_msgs.msg.Bspline()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.Move_mode, _x.Move_frame, _x.time_from_start,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 12
      self.position_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.velocity_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.acceleration_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 21
      (_x.Yaw_Rate_Mode, _x.yaw_ref, _x.yaw_rate_ref, _x.bspline.order, _x.bspline.traj_id,) = _get_struct_B2fiq().unpack(str[start:end])
      self.Yaw_Rate_Mode = bool(self.Yaw_Rate_Mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bspline.knots = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bspline.pts = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bspline.pts.append(val1)
      _x = self
      start = end
      end += 8
      (_x.bspline.start_time.secs, _x.bspline.start_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf = None
def _get_struct_2Bf():
    global _struct_2Bf
    if _struct_2Bf is None:
        _struct_2Bf = struct.Struct("<2Bf")
    return _struct_2Bf
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_B2fiq = None
def _get_struct_B2fiq():
    global _struct_B2fiq
    if _struct_B2fiq is None:
        _struct_B2fiq = struct.Struct("<B2fiq")
    return _struct_B2fiq
