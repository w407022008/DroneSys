# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/Arduino.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Arduino(genpy.Message):
  _md5sum = "75d87b27eabead7e8d84149e18bb1bd0"
  _type = "drone_msgs/Arduino"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

uint8 message_type
# enum message_type
uint8 AIRFLOW = 0  
uint8 FORCE   = 1  
uint8 IMU  = 2  

## Airflow Measurement
uint8 airflow_sensor_num        ## the number of airflow sensor
float32[16] current             ## airflow sensor current measurement [mA]
float32[16] voltage             ## airflow sensor voltage measurement [mV]
float32[16] power               ## airflow sensor power measurement [mW]
float32[8] pow_diff             ## airflow sensor power measurement difference [mW]

## Force Measurement
float32[4] diff_volt            ## Bridge voltage difference of force sensor [uV]

## IMU Measurement
geometry_msgs/Quaternion quaternion			## Quaternion rotation from XYZ body frame to ENU earth frame.
geometry_msgs/Vector3 eular_angle			## Eular angle rotation from XYZ body frame to ENU earth frame.
geometry_msgs/Vector3 acc                  ## in XYZ body frame[m/s^2]
geometry_msgs/Vector3 mag                  ## [m/s^2]
geometry_msgs/Vector3 gyro                 ## [m/s^2]
uint32 baro                      ## [pascal]
float32 temp                     ## [degree]

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  AIRFLOW = 0
  FORCE = 1
  IMU = 2

  __slots__ = ['header','message_type','airflow_sensor_num','current','voltage','power','pow_diff','diff_volt','quaternion','eular_angle','acc','mag','gyro','baro','temp']
  _slot_types = ['std_msgs/Header','uint8','uint8','float32[16]','float32[16]','float32[16]','float32[8]','float32[4]','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','uint32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,message_type,airflow_sensor_num,current,voltage,power,pow_diff,diff_volt,quaternion,eular_angle,acc,mag,gyro,baro,temp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Arduino, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.message_type is None:
        self.message_type = 0
      if self.airflow_sensor_num is None:
        self.airflow_sensor_num = 0
      if self.current is None:
        self.current = [0.] * 16
      if self.voltage is None:
        self.voltage = [0.] * 16
      if self.power is None:
        self.power = [0.] * 16
      if self.pow_diff is None:
        self.pow_diff = [0.] * 8
      if self.diff_volt is None:
        self.diff_volt = [0.] * 4
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.eular_angle is None:
        self.eular_angle = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.mag is None:
        self.mag = geometry_msgs.msg.Vector3()
      if self.gyro is None:
        self.gyro = geometry_msgs.msg.Vector3()
      if self.baro is None:
        self.baro = 0
      if self.temp is None:
        self.temp = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.message_type = 0
      self.airflow_sensor_num = 0
      self.current = [0.] * 16
      self.voltage = [0.] * 16
      self.power = [0.] * 16
      self.pow_diff = [0.] * 8
      self.diff_volt = [0.] * 4
      self.quaternion = geometry_msgs.msg.Quaternion()
      self.eular_angle = geometry_msgs.msg.Vector3()
      self.acc = geometry_msgs.msg.Vector3()
      self.mag = geometry_msgs.msg.Vector3()
      self.gyro = geometry_msgs.msg.Vector3()
      self.baro = 0
      self.temp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.message_type, _x.airflow_sensor_num))
      buff.write(_get_struct_16f().pack(*self.current))
      buff.write(_get_struct_16f().pack(*self.voltage))
      buff.write(_get_struct_16f().pack(*self.power))
      buff.write(_get_struct_8f().pack(*self.pow_diff))
      buff.write(_get_struct_4f().pack(*self.diff_volt))
      _x = self
      buff.write(_get_struct_16dIf().pack(_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.eular_angle.x, _x.eular_angle.y, _x.eular_angle.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.mag.x, _x.mag.y, _x.mag.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.baro, _x.temp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.eular_angle is None:
        self.eular_angle = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.mag is None:
        self.mag = geometry_msgs.msg.Vector3()
      if self.gyro is None:
        self.gyro = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.message_type, _x.airflow_sensor_num,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 64
      self.current = _get_struct_16f().unpack(str[start:end])
      start = end
      end += 64
      self.voltage = _get_struct_16f().unpack(str[start:end])
      start = end
      end += 64
      self.power = _get_struct_16f().unpack(str[start:end])
      start = end
      end += 32
      self.pow_diff = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 16
      self.diff_volt = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 136
      (_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.eular_angle.x, _x.eular_angle.y, _x.eular_angle.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.mag.x, _x.mag.y, _x.mag.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.baro, _x.temp,) = _get_struct_16dIf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.message_type, _x.airflow_sensor_num))
      buff.write(self.current.tostring())
      buff.write(self.voltage.tostring())
      buff.write(self.power.tostring())
      buff.write(self.pow_diff.tostring())
      buff.write(self.diff_volt.tostring())
      _x = self
      buff.write(_get_struct_16dIf().pack(_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.eular_angle.x, _x.eular_angle.y, _x.eular_angle.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.mag.x, _x.mag.y, _x.mag.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.baro, _x.temp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.eular_angle is None:
        self.eular_angle = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.mag is None:
        self.mag = geometry_msgs.msg.Vector3()
      if self.gyro is None:
        self.gyro = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.message_type, _x.airflow_sensor_num,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 64
      self.current = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      start = end
      end += 64
      self.voltage = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      start = end
      end += 64
      self.power = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      start = end
      end += 32
      self.pow_diff = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 16
      self.diff_volt = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 136
      (_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.eular_angle.x, _x.eular_angle.y, _x.eular_angle.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.mag.x, _x.mag.y, _x.mag.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.baro, _x.temp,) = _get_struct_16dIf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16dIf = None
def _get_struct_16dIf():
    global _struct_16dIf
    if _struct_16dIf is None:
        _struct_16dIf = struct.Struct("<16dIf")
    return _struct_16dIf
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
