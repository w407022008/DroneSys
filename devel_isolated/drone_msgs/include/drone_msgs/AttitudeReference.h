// Generated by gencpp from file drone_msgs/AttitudeReference.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_ATTITUDEREFERENCE_H
#define DRONE_MSGS_MESSAGE_ATTITUDEREFERENCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct AttitudeReference_
{
  typedef AttitudeReference_<ContainerAllocator> Type;

  AttitudeReference_()
    : header()
    , thrust_sp()
    , collective_accel(0.0)
    , desired_attitude()
    , desired_att_q()
    , body_rate()  {
      thrust_sp.assign(0.0);

      desired_attitude.assign(0.0);
  }
  AttitudeReference_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , thrust_sp()
    , collective_accel(0.0)
    , desired_attitude()
    , desired_att_q(_alloc)
    , body_rate(_alloc)  {
  (void)_alloc;
      thrust_sp.assign(0.0);

      desired_attitude.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 3>  _thrust_sp_type;
  _thrust_sp_type thrust_sp;

   typedef float _collective_accel_type;
  _collective_accel_type collective_accel;

   typedef boost::array<float, 3>  _desired_attitude_type;
  _desired_attitude_type desired_attitude;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _desired_att_q_type;
  _desired_att_q_type desired_att_q;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _body_rate_type;
  _body_rate_type body_rate;





  typedef boost::shared_ptr< ::drone_msgs::AttitudeReference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::AttitudeReference_<ContainerAllocator> const> ConstPtr;

}; // struct AttitudeReference_

typedef ::drone_msgs::AttitudeReference_<std::allocator<void> > AttitudeReference;

typedef boost::shared_ptr< ::drone_msgs::AttitudeReference > AttitudeReferencePtr;
typedef boost::shared_ptr< ::drone_msgs::AttitudeReference const> AttitudeReferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::AttitudeReference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::AttitudeReference_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::AttitudeReference_<ContainerAllocator1> & lhs, const ::drone_msgs::AttitudeReference_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.thrust_sp == rhs.thrust_sp &&
    lhs.collective_accel == rhs.collective_accel &&
    lhs.desired_attitude == rhs.desired_attitude &&
    lhs.desired_att_q == rhs.desired_att_q &&
    lhs.body_rate == rhs.body_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::AttitudeReference_<ContainerAllocator1> & lhs, const ::drone_msgs::AttitudeReference_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::AttitudeReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::AttitudeReference_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::AttitudeReference_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad65c8727b64e262c550df8ad8b37905";
  }

  static const char* value(const ::drone_msgs::AttitudeReference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad65c8727b64e262ULL;
  static const uint64_t static_value2 = 0xc550df8ad8b37905ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/AttitudeReference";
  }

  static const char* value(const ::drone_msgs::AttitudeReference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## Setpoint Attitude + T\n"
"float32[3] thrust_sp                   ## Single Rotor Thrust setpoint\n"
"float32 collective_accel               ## [m/s^2] Axis Body_Z Collective accel septoint\n"
"float32[3] desired_attitude            ## [rad] Eurler angle setpoint\n"
"geometry_msgs/Quaternion desired_att_q ## quat setpoint\n"
"geometry_msgs/Vector3 body_rate  ## [rad/s]\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::drone_msgs::AttitudeReference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.thrust_sp);
      stream.next(m.collective_accel);
      stream.next(m.desired_attitude);
      stream.next(m.desired_att_q);
      stream.next(m.body_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AttitudeReference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::AttitudeReference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::AttitudeReference_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "thrust_sp[]" << std::endl;
    for (size_t i = 0; i < v.thrust_sp.size(); ++i)
    {
      s << indent << "  thrust_sp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.thrust_sp[i]);
    }
    s << indent << "collective_accel: ";
    Printer<float>::stream(s, indent + "  ", v.collective_accel);
    s << indent << "desired_attitude[]" << std::endl;
    for (size_t i = 0; i < v.desired_attitude.size(); ++i)
    {
      s << indent << "  desired_attitude[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.desired_attitude[i]);
    }
    s << indent << "desired_att_q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.desired_att_q);
    s << indent << "body_rate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.body_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_ATTITUDEREFERENCE_H
