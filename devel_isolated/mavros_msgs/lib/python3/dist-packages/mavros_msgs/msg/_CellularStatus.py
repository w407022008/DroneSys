# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/CellularStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CellularStatus(genpy.Message):
  _md5sum = "a474bdb9df111b4e16fab4c29f7a6956"
  _type = "mavros_msgs/CellularStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Follows https://mavlink.io/en/messages/common.html#CELLULAR_STATUS specification

uint8 status
uint8 failure_reason
uint8 type
uint8 quality
uint16 mcc
uint16 mnc
uint16 lac"""
  __slots__ = ['status','failure_reason','type','quality','mcc','mnc','lac']
  _slot_types = ['uint8','uint8','uint8','uint8','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,failure_reason,type,quality,mcc,mnc,lac

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CellularStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.failure_reason is None:
        self.failure_reason = 0
      if self.type is None:
        self.type = 0
      if self.quality is None:
        self.quality = 0
      if self.mcc is None:
        self.mcc = 0
      if self.mnc is None:
        self.mnc = 0
      if self.lac is None:
        self.lac = 0
    else:
      self.status = 0
      self.failure_reason = 0
      self.type = 0
      self.quality = 0
      self.mcc = 0
      self.mnc = 0
      self.lac = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B3H().pack(_x.status, _x.failure_reason, _x.type, _x.quality, _x.mcc, _x.mnc, _x.lac))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.status, _x.failure_reason, _x.type, _x.quality, _x.mcc, _x.mnc, _x.lac,) = _get_struct_4B3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B3H().pack(_x.status, _x.failure_reason, _x.type, _x.quality, _x.mcc, _x.mnc, _x.lac))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.status, _x.failure_reason, _x.type, _x.quality, _x.mcc, _x.mnc, _x.lac,) = _get_struct_4B3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B3H = None
def _get_struct_4B3H():
    global _struct_4B3H
    if _struct_4B3H is None:
        _struct_4B3H = struct.Struct("<4B3H")
    return _struct_4B3H
