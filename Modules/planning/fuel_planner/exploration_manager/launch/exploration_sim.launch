<launch>

  <!-- common params -->
  <!-- topic of your odometry such as VIO or LIO /vins_estimator/odometry  /mavros/local_position/odom  vrpn_client_node/NanoDrone250/pose -->
  <arg name="odom_topic" value="/mavros/local_position/odom" />
  <arg name="sense_range_max" value="4.0"/>
  <arg name="max_yaw_rate" value="50"/>
  <arg name="resolution" value="0.2"/>
  <arg name="obs_inflate" value="0.2"/>
  <arg name="FOV_H" value="69"/> <!-- degree -->
  <arg name="FOV_V" value="52"/> <!-- degree -->
  <!-- depth topic: depth image, 640x480 by default -->
  <!-- cloud topic: point cloud measurement  -->
  <!-- subscribe ONLY TO ONE of the two topics -->
  <arg name="depth_topic" value="/camera/depth/image_raw"/>
  <arg name="cloud_topic" value="/pcl_render_node/cloud"/>
  <!-- maximum velocity and acceleration the drone will reach -->
  <arg name="max_vel" value="0.3" />
  <arg name="max_acc" value="0.3" />

  <!-- sdf_map.cpp -->

  <!-- map_ros.cpp -->
  <!-- intrinsic params of the depth camera for 2.5inch_d435 -->
    <!--arg name="cx" default="80.91056823730469"/>
    <arg name="cy" default="59.920318603515625"/>
    <arg name="fx" default="95.87460327148438"/>
    <arg name="fy" default="95.87460327148438"/-->

  <!-- intrinsic params of the depth camera for 5inch_fpga -->
    <!-- <arg name="cx" default="86.50833511352539"/>
    <arg name="cy" default="63.15933036804199"/>
    <arg name="fx" default="113.88280846176902"/>
    <arg name="fy" default="113.88280846176902"/> -->

    <!-- intrinsic params of the depth camera in simulation -->
    <arg name="cx" value="160.5"/>
    <arg name="cy" value="120.5"/>
    <arg name="fx" value="231.06897487523196"/>
    <arg name="fy" value="231.06897487523196"/>

  <!-- main node -->
  <node pkg="exploration_manager" name="exploration_node" type="exploration_node" output="screen">
    <remap from ="/odom_world" to="$(arg odom_topic)"/>
    <remap from ="/map_ros/pose"   to = "$(arg odom_topic)"/> 
    <remap from ="/map_ros/depth" to = "$(arg depth_topic)"/>
    <remap from ="/map_ros/cloud" to="$(arg cloud_topic)"/>

    <!-- Map Ros -->
    <param name="map_ros/use_d435i_vins" value="false"/>
    <param name="map_ros/use_d435i_mavros" value="false"/>
    <param name="map_ros/use_fpga_vins" value="false"/>
    <param name="map_ros/use_fpga_mavros" value="true"/>
    <param name="map_ros/use_sensors_inSim" value="false"/>

    <param name="map_ros/cx" value="$(arg cx)"/>
    <param name="map_ros/cy" value="$(arg cy)"/>
    <param name="map_ros/fx" value="$(arg fx)"/>
    <param name="map_ros/fy" value="$(arg fy)"/>
    <param name="map_ros/depth_filter_maxdist"   value="$(eval 0.1 + arg('sense_range_max'))"/> <!-- max sensor range -->
    <param name="map_ros/depth_filter_mindist"   value="0.1"/>                    <!-- ignor near -->
    <param name="map_ros/depth_filter_margin"    value="0"/>                      <!-- cut edge -->
    <param name="map_ros/k_depth_scaling_factor" value="1000.0"/>                 <!-- mm -> m -->
    <param name="map_ros/skip_pixel" value="1"/>                                  <!-- skip pixel -->
    <param name="map_ros/esdf_slice_height" value="0.3"/>                         <!-- /sdf_map/esdf vis demo slice height-->
    <param name="map_ros/visualization_truncate_height"   value="10.09"/>         <!-- map pcl vis: ceil -->
    <param name="map_ros/visualization_truncate_low"   value="-2.0"/>             <!-- map pcl vis: floor -->
    
    <param name="map_ros/show_occ_time"  value="false"/>
    <param name="map_ros/show_esdf_time" value="false"/>
    <param name="map_ros/show_all_map" value="true"/>                             <!-- all in box /sdf_map/occupancy_all-->
    <param name="map_ros/show_local_map" value="false"/>                           <!-- local in box /sdf_map/occupancy_local, /sdf_map/occupancy_local_inflate-->
    <param name="map_ros/show_unknow_map" value="false"/>                          <!-- unkonw in local /sdf_map/unknown -->
    <param name="map_ros/show_esdf_slice" value="false"/>                          <!-- in local /sdf_map/esdf-->
    <param name="map_ros/show_update_range" value="false"/>                        <!-- in local /sdf_map/update_range-->
    <param name="map_ros/show_depth_pcl" value="false"/>                           <!-- /sdf_map/depth_cloud-->
    <param name="map_ros/frame_id"      value="world"/>
    <param name="map_ros/log/on"      value="false"/>                             <!-- log time and known volumn by exploration-->
    <param name="map_ros/log/dir"      value=""/>

    <!-- SDF Map -->
    <param name="sdf_map/resolution"      value="$(arg resolution)" /> 
    <!-- size of occupancy map, change the size in x, y, z-->
    <param name="sdf_map/map_size_x"   value="20.0" /> 
    <param name="sdf_map/map_size_y"   value="20.0" /> 
    <param name="sdf_map/ground_height" value="-1.0"/>            <!-- map origin z (aka ground) -->
    <param name="sdf_map/map_size_z"   value="4.0" />             <!-- height from ground -->
    <param name="sdf_map/obstacles_inflation"     value="$(arg obs_inflate)" />  <!-- for obs -->
    <param name="sdf_map/local_bound_inflate"    value="0.5"/>    <!-- for local update range, less than resolution -->
    <!-- <param name="sdf_map/local_map_margin" value="50"/> -->
    <param name="sdf_map/default_dist"        value="$(arg sense_range_max)"/>       <!-- default dist to closest obs-->
    <param name="sdf_map/optimistic" value="false" type="bool"/>
    <param name="sdf_map/signed_dist" value="false" type="bool"/> <!-- neg dist/grad-->
    
    <!-- occupied prob -->
    <!-- auto logit = [](const double& x) { return log(x / (1 - x)); }; -->
    <!-- input: 0~1 -->
    <!-- output: -inf~inf -->
    <param name="sdf_map/p_hit"  value="0.65"/>
    <param name="sdf_map/p_miss" value="0.35"/>
    <param name="sdf_map/p_min"  value="0.12"/>
    <param name="sdf_map/p_max"  value="0.90"/>
    <param name="sdf_map/p_occ"  value="0.70"/>
    <!-- <param name="sdf_map/min_ray_length" value="0.5"/> -->
    <param name="sdf_map/max_ray_length" value="$(arg sense_range_max)"/>
    <param name="sdf_map/virtual_ceil_height"   value="-10"/>       <!-- if greater than -0.5 -->
    <!-- preparation for frontier find, exploration space -->
    <param name="sdf_map/box_min_x" value="-10.0" type="double"/>
    <param name="sdf_map/box_min_y" value="-10.0" type="double"/>
    <param name="sdf_map/box_min_z" value="-0.8" type="double"/>
    <param name="sdf_map/box_max_x" value="10.0" type="double"/>
    <param name="sdf_map/box_max_y" value="10.0" type="double"/>
    <param name="sdf_map/box_max_z" value="2.0" type="double"/>

    <!-- Perception Utils -->
    <param name="perception_utils/max_dist" value="$(arg sense_range_max)" type="double"/>;      <!-- is it in the FOV range? used for frontier find-->
    <!-- draw FOV -->
    <param name="perception_utils/top_angle" value="$(eval 0.008726 * arg('FOV_V'))" type="double"/>;
    <param name="perception_utils/left_angle" value="$(eval 0.008726 * arg('FOV_H'))" type="double"/>;
    <param name="perception_utils/right_angle" value="$(eval 0.008726 * arg('FOV_H'))" type="double"/>;
    <param name="perception_utils/vis_dist" value="$(eval 0.1 + arg('sense_range_max'))" type="double"/>;

    <!-- Frontrier Finder -->
    <param name="frontier/cluster_min" value="20" type="int"/>                                    <!-- a frontier has such points at least-->
    <param name="frontier/cluster_size_xy" value="1.0" type="double"/>                            <!-- frontier cluster xy dist amx to central, else need to slipt-->
    <!--param name="frontier/cluster_size_z" value="10.0" type="double"/-->                            <!-- frontier cluster can be merged? along z-->
    <param name="frontier/near_unknow_clearance" value="0.21" type="double"/>                     <!-- is it near unknow sapce? viewpoint should not be there -->
    <param name="frontier/candidate_dphi" value="$(eval 15 * 3.1415926 / 180.0)" type="double"/>  <!-- circumferential sampling rad-->
    <param name="frontier/candidate_rmin" value="$(eval arg('sense_range_max') / 3)" type="double"/>                             <!-- sphere searching space min-->
    <param name="frontier/candidate_rmax" value="$(eval arg('sense_range_max') / 2)" type="double"/>                             <!-- sphere searching space max-->
    <param name="frontier/candidate_rnum" value="3" type="int"/>                                  <!-- sampling layer num-->
    <param name="frontier/min_visib_num" value="6" type="int"/>;                                 <!-- if as viewpoint-->
    <param name="frontier/down_sample_factor" value="3" type="int"/>;                             <!-- frontier cells down sampling as filtered_cells_, leafsize = such resolution-->
    <param name="frontier/a_frontier_explored_rate_at_least" value="0.8" type="double"/>;         <!-- this frontier has been covered? 0:completly -->

    <!-- Fsm -->
    <param name="fsm/thresh_replan1" value="0.5" type="double"/>                                  <!-- Replan if traj is almost fully executed. 0(s):finished-->
    <param name="fsm/thresh_replan2" value="0.5" type="double"/>                                  <!-- Replan if next frontier to be visited is covered. 0(s):on start-->
    <param name="fsm/thresh_replan3" value="10.0" type="double"/>                                 <!-- Replan anyway after such time seconde-->
    <param name="fsm/replan_time" value="0.005" type="double"/>                                   <!-- assuming that replan once consume such time-->

    <!-- Exploration manager -->
    <param name="exploration/refine_local" value="true" type="bool"/>                          <!-- local refine after global tour search. Get top viewpoints(only need min_candidate_dist_) then global then local-->
    <param name="exploration/min_candidate_dist" value="1.50" type="double"/>                        <!-- Get rank top viewpoints far enough to current-->
    <param name="exploration/refined_num" value="7" type="int"/>                               <!-- local path refine max num of pathpoints-->
    <param name="exploration/refined_radius" value="5.0" type="double"/>                       <!-- local range around current pos-->
    <!-- Get several(top_view_num at least) top viewpoints(max_decay as rate) that are far enough(min_candidate_dist_) -->
    <param name="exploration/max_decay" value="0.8" type="double"/>                            <!-- decay num of the first frontier(has the most cells) as a threshold to rank top frontiers-->
    <param name="exploration/top_view_num" value="15" type="int"/>                             <!-- top frontier should have such cells at least-->
    <!-- compute cost -->
    <param name="exploration/vm" value="$(eval 1.0 * arg('max_vel'))" type="double"/>
    <param name="exploration/am" value="$(eval 1.0 * arg('max_acc'))" type="double"/>
    <param name="exploration/yd" value="$(eval arg('max_yaw_rate') * 3.1415926 / 180.0)" type="double"/>
    <param name="exploration/ydd" value="$(eval 20 * 3.1415926 / 180.0)" type="double"/>
    <param name="exploration/w_dir" value="1.5" type="double"/>                                 <!-- when tourRefine, weight for vel dir change-->
    <param name="exploration/tsp_dir" value="$(find lkh_tsp_solver)/resource" type="string"/>   <!-- log tsp dir-->
    <param name="exploration/relax_time" value="0.0" type="double"/>                            <!-- yaw tracking traj until last such time rest to track end_yaw-->

    <!-- Heading Planner -->
    <!-- dijkstraSearch yaw path-->
    <param name="heading_planner/yaw_diff" value="$(eval 30 * 3.1415926 / 180.0)" type="double"/>         <!-- yaw resolution btw 2 vertices-->
    <param name="heading_planner/half_vert_num" value="5" type="int"/>                                    <!-- vertice num : 5->11-->
    <param name="heading_planner/lambda1" value="2.0" type="double"/>
    <param name="heading_planner/lambda2" value="1.0" type="double"/>
    <param name="heading_planner/max_yaw_rate" value="$(eval arg('max_yaw_rate') * 3.1415926 / 180.0)" type="double"/>
    <param name="heading_planner/w" value="20000.0" type="double"/>
    <param name="heading_planner/weight_type" value="1" type="double"/>                                <!-- uniform-->

    <!-- Planner Manager -->
    <param name="manager/max_vel" value="$(arg max_vel)" type="double"/>
    <param name="manager/max_acc" value="$(arg max_acc)" type="double"/>
    <param name="manager/max_jerk" value="4" type="double"/>
    <!-- <param name="manager/dynamic_environment" value="0" type="int"/> -->
    <param name="manager/local_segment_length" value="6.0" type="double"/>      <!-- if topo-->
    <param name="manager/control_points_distance" value="0.35" type="double"/>
    <param name="manager/clearance_threshold" value="0.2" type="double"/>       <!-- if topo-->
    <param name="manager/use_geometric_path" value="true" type="bool"/>         <!-- Astar: must be true-->
    <param name="manager/use_kinodynamic_path" value="false" type="bool"/>       <!-- kinoA*: must be true-->
    <param name="manager/use_topo_path" value="false" type="bool"/>             <!-- topo: nothing use-->
    <param name="manager/use_optimization" value="true" type="bool"/>           <!-- traj opt: must be true-->
    <param name="manager/use_active_perception" value="true" type="bool"/>      <!-- FrontierFinder, HeadingPlanner, VisibilityUtil: must be true-->
    <param name="manager/min_time" value="true" type="bool"/>                   <!-- Minimize time opt-->

    <!-- Kinodynamic Path Searching -->
    <param name="search/max_tau" value="0.8" type="double"/>                  <!-- state transite time step-->
    <param name="search/init_max_tau" value="1.0" type="double"/>             <!-- max_tau when first search-->
    <param name="search/max_vel" value="$(arg max_vel)" type="double"/>       <!-- max vel limitaion-->
    <param name="search/vel_margin" value="0.25" type="double"/>              <!-- max_vel torlerance-->
    <param name="search/acc_step" value="$(arg max_acc)" type="double"/>       <!-- state transite kinomatic step-->
    <param name="search/w_time" value="10.0" type="double"/>                  <!-- g_score step weights on time-->
    <param name="search/horizon" value="5.0" type="double"/>                  <!-- searching radius horizon-->
    <param name="search/lambda_heu" value="10.0" type="double"/>              <!-- h_score heuristic-->
    <param name="search/resolution_astar" value="$(eval 2.0 * arg('resolution'))" type="double"/>         <!-- searching space resolution, >= map_resolution-->
    <param name="search/time_resolution" value="0.8" type="double"/>          <!-- searching time resolution-->
    <param name="search/allocate_num" value="100000" type="int"/>             <!-- return NO_PAHT of nodes searched too more-->
    <param name="search/check_num" value="10" type="int"/>                    <!-- safty check steps for one tau time transite-->
    <param name="search/optimistic" value="false" type="bool"/>               <!-- consider unknow cell as free-->

    <param name="astar/lambda_heu" value="10000.0" type="double"/>            <!-- h_score heuristic-->
    <param name="astar/resolution_astar" value="$(eval 2.0 * arg('resolution'))" type="double"/>          <!-- A* searching resolution, >= map_resolution-->
    <param name="astar/allocate_num" value="1000000" type="int"/>             <!-- return NO_PATH if nodes searched too more-->
    <param name="astar/max_search_time" value="0.01" type="double"/>         <!-- return NO_PATH if a* searching overtime-->

    <!-- Trajectory & Optimization -->
    <param name="optimization/ld_smooth" value="20.0" type="double"/>
    <param name="optimization/ld_dist" value="10.0" type="double"/>
    <param name="optimization/ld_feasi" value="2.0" type="double"/>
    <param name="optimization/ld_start" value="100.0" type="double"/>
    <param name="optimization/ld_end" value="0.5" type="double"/>
    <param name="optimization/ld_guide" value="1.5" type="double"/>
    <param name="optimization/ld_waypt" value="0.3" type="double"/>
    <param name="optimization/ld_view" value="0.0" type="double"/>
    <param name="optimization/ld_time" value="1.0" type="double"/>

    <param name="optimization/dist0" value="0.7" type="double"/>
    <param name="optimization/max_vel" value="$(arg max_vel)" type="double"/>
    <param name="optimization/max_acc" value="$(arg max_acc)" type="double"/>

    <param name="optimization/algorithm1" value="15" type="int"/>
    <param name="optimization/algorithm2" value="11" type="int"/>
    <param name="optimization/max_iteration_num1" value="2" type="int"/>
    <param name="optimization/max_iteration_num2" value="2000" type="int"/>
    <param name="optimization/max_iteration_num3" value="200" type="int"/>
    <param name="optimization/max_iteration_num4" value="200" type="int"/>
    <param name="optimization/max_iteration_time1" value="0.0001" type="double"/>
    <param name="optimization/max_iteration_time2" value="0.005" type="double"/>
    <param name="optimization/max_iteration_time3" value="0.003" type="double"/>
    <param name="optimization/max_iteration_time4" value="0.003" type="double"/>

    <param name="bspline/limit_vel" value="$(arg max_vel)" type="double"/>
    <param name="bspline/limit_acc" value="$(arg max_acc)" type="double"/>
    <param name="bspline/limit_ratio" value="1.1" type="double"/>

  </node>

  <!-- trajectory server -->
  <node pkg="plan_manage" name="traj_server" type="traj_server" output="screen">
    <remap from="/position_cmd" to="planning/pos_cmd"/>
    <remap from="/control_command" to="/drone_msg/control_command"/>
    <remap from="/odom_world" to="$(arg odom_topic)"/>
    
    <param name="traj_server/pub_traj_id" value="4" type="int"/>
    <!-- <param name="traj_server/init_x" value="$(arg init_x)" type="double"/> -->
    <!-- <param name="traj_server/init_y" value="$(arg init_y)" type="double"/> -->
    <!-- <param name="traj_server/init_z" value="$(arg init_z)" type="double"/> -->
  </node>

  <node name="rvizvisualisation" pkg="rviz" type="rviz" output="log" args="-d $(find exploration_manager)/config/traj.rviz" />
  
  <!-- use keyboard control -->
  <!-- <node pkg="keyboard_control" name="keyboard_control" type="keyboard_control" output="screen" /> -->

  <!-- <node name="rvizvisualisation" pkg="rviz" type="rviz" output="log" args="-d $(find plan_manage)/config/traj_fpga_mavros.rviz" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 world navigation 100" /> -->

  <!-- use simulator -->
  <!-- <arg name="init_x" value="0.0"/>
  <arg name="init_y" value="0.0"/>
  <arg name="init_z" value="0.0"/> 
  <node name="pcl_depth_pub" pkg="exploration_manager" type="pcl_depth_pub.py" output="screen"/>

  <include file="$(find exploration_manager)/launch/simulator.xml">
    <arg name="map_size_x_" value="$(arg map_size_x)"/>
    <arg name="map_size_y_" value="$(arg map_size_y)"/>
    <arg name="map_size_z_" value="$(arg map_size_z)"/>

    <arg name="init_x" value="$(arg init_x)"/>
    <arg name="init_y" value="$(arg init_y)"/>
    <arg name="init_z" value="$(arg init_z)"/>

    <arg name="odometry_topic" value="$(arg odom_topic)" />
    <arg name="c_num" value="0"/>
    <arg name="p_num" value="130"/>
  </include> -->

</launch>
