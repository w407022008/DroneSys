<?xml version="1.0"?>
<launch>
    <!-- Posix SITL environment launch script -->
    <!-- launchs PX4 SITL and spawns vehicle -->
    <!-- vehicle pose -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    <!-- vehcile model and config -->
    <arg name="ID" default=""/>
    <arg name="mode" default=""/>
    <arg name="model" default="iris"/> 
    <arg name="vehicle" default="mav$(arg ID)"/>
    <arg name="sdf" default="$(find simulation_gazebo)/drone_models/$(arg vehicle)$(arg mode)/$(arg vehicle)$(arg mode).sdf"/>
    <arg name="est" default="ekf2"/>
    <env name="PX4_SIM_MODEL" value="gazebo-classic_$(arg model)" />
    <arg name="mavlink_udp_port" default="14560"/>
    <arg name="mavlink_tcp_port" default="4560"/>
    <arg name="fcu_url" default="udp://:14542@localhost:14582"/>
    <arg name="gcs_url" default=""/>    
    
    <!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <!-- generate sdf vehicle model -->
    <arg name="cmd" default="xmlstarlet ed -d '//plugin[@name=&quot;mavlink_interface&quot;]/mavlink_tcp_port' -s '//plugin[@name=&quot;mavlink_interface&quot;]' -t elem -n mavlink_tcp_port -v $(arg mavlink_tcp_port) $(arg sdf)"/>
    <param command="$(arg cmd)" name="model_description"/>
    
    <!-- PX4 SITL -->
    <arg unless="$(arg interactive)" name="px4_command_arg1" value=""/>
    <arg     if="$(arg interactive)" name="px4_command_arg1" value="-d"/>
    <node name="sitl_$(arg ID)" pkg="px4" type="px4" output="screen" args="$(find px4)/build/px4_sitl_default/etc -s etc/init.d-posix/rcS -i $(arg ID) -w sitl_$(arg vehicle) $(arg px4_command_arg1)">
    </node>
    
    <!-- spawn vehicle -->
    <node name="$(arg vehicle)_spawn" output="screen" pkg="gazebo_ros" type="spawn_model" args="-sdf -param model_description -model $(arg vehicle) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/>
    
    <!-- MAVROS -->
    <node pkg="mavros" type="mavros_node" name="mavros" output="screen">
        <param name="fcu_url" value="$(arg fcu_url)" />
        <param name="gcs_url" value="$(arg gcs_url)" />
        <param name="target_system_id" value="$(eval 1 + arg('ID'))" />
        <param name="target_component_id" value="1" />
        <rosparam command="load" file="$(find simulation_gazebo)/drone_models/$(arg vehicle)/mavros_config/px4_pluginlists.yaml" />
        <rosparam command="load" file="$(find simulation_gazebo)/drone_models/$(arg vehicle)/mavros_config/px4_config.yaml" />
    </node>
    
    <!-- TF for RGBD_camera-->
    <node pkg="tf" type="static_transform_publisher" name="tf_realsense_camera" args="0.07 0.016 -0.04 -1.5707963 0 -1.5707963 $(arg vehicle)_link $(arg vehicle)_camera_link 100"/>
    
    
    <!-- run the px4_transceiver.cpp -->
    <node pkg="mavros_interface" type="px4_transceiver" name="px4_transceiver$(arg ID)" output="screen">
        <!-- positioning source: 0 for vicon， 1 for L-SLAM, 2 for gazebo ground truth, 3 for Intel T265 dual camera slam，4 for V-SLAM-->
        <param name="input_source" value="2" />
        <param name="rate_hz" value="30" />
        <param name="uav_name" value="/$(arg vehicle)" />
    </node>
	
    <!-- run the px4_commander.cpp -->
    <node pkg="mavros_interface" type="px4_commander" name="px4_commander$(arg ID)" output="screen">
        <param name="uav_name" value="/$(arg vehicle)" />
        <rosparam command="load" file="$(find simulation_gazebo)/config/control_config/px4_commander.yaml"/>
    </node>
    
    <!-- run the terminal_control.cpp -->
    <node pkg="control" type="terminal_control" name="terminal_control$(arg ID)" output="screen" launch-prefix="gnome-terminal --tab --">	
        <param name="uav_name" value="/$(arg vehicle)" />
        <rosparam command="load" file="$(find simulation_gazebo)/config/control_config/terminal_control.yaml" />
    </node>
    <!-- Geometric Controller -->
    <node pkg="geometric_control" type="geometric_position_controller_node" name="geometric_controller" output="screen" >
      <rosparam file="$(find geometric_control)/parameters/geometric_controller.yaml" />
      
      <remap from="odometry" to="drone_msg/drone_odom" />
    </node>

</launch>
