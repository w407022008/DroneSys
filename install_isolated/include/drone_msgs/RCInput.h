// Generated by gencpp from file drone_msgs/RCInput.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_RCINPUT_H
#define DRONE_MSGS_MESSAGE_RCINPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct RCInput_
{
  typedef RCInput_<ContainerAllocator> Type;

  RCInput_()
    : header()
    , rc_x(0.0)
    , rc_y(0.0)
    , rc_z(0.0)
    , rc_r(0.0)
    , buttons(0)
    , goal_enable(0)
    , data_source(0)  {
    }
  RCInput_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rc_x(0.0)
    , rc_y(0.0)
    , rc_z(0.0)
    , rc_r(0.0)
    , buttons(0)
    , goal_enable(0)
    , data_source(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _rc_x_type;
  _rc_x_type rc_x;

   typedef float _rc_y_type;
  _rc_y_type rc_y;

   typedef float _rc_z_type;
  _rc_z_type rc_z;

   typedef float _rc_r_type;
  _rc_r_type rc_r;

   typedef uint32_t _buttons_type;
  _buttons_type buttons;

   typedef uint8_t _goal_enable_type;
  _goal_enable_type goal_enable;

   typedef int32_t _data_source_type;
  _data_source_type data_source;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DISABLE)
  #undef DISABLE
#endif
#if defined(_WIN32) && defined(MAVROS_MANUAL_CONTROL)
  #undef MAVROS_MANUAL_CONTROL
#endif
#if defined(_WIN32) && defined(DRIVER_JOYSTICK)
  #undef DRIVER_JOYSTICK
#endif

  enum {
    DISABLE = 0u,
    MAVROS_MANUAL_CONTROL = 1u,
    DRIVER_JOYSTICK = 2u,
  };


  typedef boost::shared_ptr< ::drone_msgs::RCInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::RCInput_<ContainerAllocator> const> ConstPtr;

}; // struct RCInput_

typedef ::drone_msgs::RCInput_<std::allocator<void> > RCInput;

typedef boost::shared_ptr< ::drone_msgs::RCInput > RCInputPtr;
typedef boost::shared_ptr< ::drone_msgs::RCInput const> RCInputConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::RCInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::RCInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::RCInput_<ContainerAllocator1> & lhs, const ::drone_msgs::RCInput_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rc_x == rhs.rc_x &&
    lhs.rc_y == rhs.rc_y &&
    lhs.rc_z == rhs.rc_z &&
    lhs.rc_r == rhs.rc_r &&
    lhs.buttons == rhs.buttons &&
    lhs.goal_enable == rhs.goal_enable &&
    lhs.data_source == rhs.data_source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::RCInput_<ContainerAllocator1> & lhs, const ::drone_msgs::RCInput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::RCInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::RCInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::RCInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::RCInput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::RCInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::RCInput_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::RCInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13d10a65cefb07444f918f9ce0babb28";
  }

  static const char* value(const ::drone_msgs::RCInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13d10a65cefb0744ULL;
  static const uint64_t static_value2 = 0x4f918f9ce0babb28ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::RCInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/RCInput";
  }

  static const char* value(const ::drone_msgs::RCInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::RCInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Radio Control Input\n"
"std_msgs/Header header\n"
"\n"
"# Data Source\n"
"uint8 DISABLE = 0\n"
"uint8 MAVROS_MANUAL_CONTROL = 1\n"
"uint8 DRIVER_JOYSTICK = 2\n"
"\n"
"float32 rc_x             # stick position in x direction -1..1\n"
"                         # in general corresponds to forward/back motion or pitch of vehicle,\n"
"                         # in general a positive value means forward or negative pitch and\n"
"                         # a negative value means backward or positive pitch\n"
"float32 rc_y             # stick position in y direction -1..1\n"
"                         # in general corresponds to right/left motion or roll of vehicle,\n"
"                         # in general a positive value means right or positive roll and\n"
"                         # a negative value means left or negative roll\n"
"float32 rc_z             # throttle stick position 0..1\n"
"                         # in general corresponds to up/down motion or thrust of vehicle,\n"
"                         # in general the value corresponds to the demanded throttle by the user,\n"
"                         # if the input is used for setting the setpoint of a vertical position\n"
"                         # controller any value > 0.5 means up and any value < 0.5 means down\n"
"float32 rc_r             # yaw stick/twist position, -1..1\n"
"                         # in general corresponds to the righthand rotation around the vertical\n"
"                         # (downwards) axis of the vehicle\n"
"uint32 buttons           # Binary\n"
"\n"
"uint8 goal_enable        # push down(1):enable; release(0):disable\n"
"\n"
"int32 data_source # determin the data source\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::drone_msgs::RCInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::RCInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rc_x);
      stream.next(m.rc_y);
      stream.next(m.rc_z);
      stream.next(m.rc_r);
      stream.next(m.buttons);
      stream.next(m.goal_enable);
      stream.next(m.data_source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RCInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::RCInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::RCInput_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rc_x: ";
    Printer<float>::stream(s, indent + "  ", v.rc_x);
    s << indent << "rc_y: ";
    Printer<float>::stream(s, indent + "  ", v.rc_y);
    s << indent << "rc_z: ";
    Printer<float>::stream(s, indent + "  ", v.rc_z);
    s << indent << "rc_r: ";
    Printer<float>::stream(s, indent + "  ", v.rc_r);
    s << indent << "buttons: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.buttons);
    s << indent << "goal_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_enable);
    s << indent << "data_source: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data_source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_RCINPUT_H
