// Generated by gencpp from file drone_msgs/DroneTarget.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_DRONETARGET_H
#define DRONE_MSGS_MESSAGE_DRONETARGET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <mavros_msgs/ActuatorControl.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct DroneTarget_
{
  typedef DroneTarget_<ContainerAllocator> Type;

  DroneTarget_()
    : header()
    , position_target()
    , velocity_target()
    , acceleration_target()
    , q_target()
    , euler_target()
    , rate_target()
    , thrust_target(0.0)
    , actuator_target()  {
      position_target.assign(0.0);

      velocity_target.assign(0.0);

      acceleration_target.assign(0.0);

      euler_target.assign(0.0);

      rate_target.assign(0.0);
  }
  DroneTarget_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position_target()
    , velocity_target()
    , acceleration_target()
    , q_target(_alloc)
    , euler_target()
    , rate_target()
    , thrust_target(0.0)
    , actuator_target(_alloc)  {
  (void)_alloc;
      position_target.assign(0.0);

      velocity_target.assign(0.0);

      acceleration_target.assign(0.0);

      euler_target.assign(0.0);

      rate_target.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 3>  _position_target_type;
  _position_target_type position_target;

   typedef boost::array<float, 3>  _velocity_target_type;
  _velocity_target_type velocity_target;

   typedef boost::array<float, 3>  _acceleration_target_type;
  _acceleration_target_type acceleration_target;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q_target_type;
  _q_target_type q_target;

   typedef boost::array<float, 3>  _euler_target_type;
  _euler_target_type euler_target;

   typedef boost::array<float, 3>  _rate_target_type;
  _rate_target_type rate_target;

   typedef float _thrust_target_type;
  _thrust_target_type thrust_target;

   typedef  ::mavros_msgs::ActuatorControl_<ContainerAllocator>  _actuator_target_type;
  _actuator_target_type actuator_target;





  typedef boost::shared_ptr< ::drone_msgs::DroneTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::DroneTarget_<ContainerAllocator> const> ConstPtr;

}; // struct DroneTarget_

typedef ::drone_msgs::DroneTarget_<std::allocator<void> > DroneTarget;

typedef boost::shared_ptr< ::drone_msgs::DroneTarget > DroneTargetPtr;
typedef boost::shared_ptr< ::drone_msgs::DroneTarget const> DroneTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::DroneTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::DroneTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::DroneTarget_<ContainerAllocator1> & lhs, const ::drone_msgs::DroneTarget_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position_target == rhs.position_target &&
    lhs.velocity_target == rhs.velocity_target &&
    lhs.acceleration_target == rhs.acceleration_target &&
    lhs.q_target == rhs.q_target &&
    lhs.euler_target == rhs.euler_target &&
    lhs.rate_target == rhs.rate_target &&
    lhs.thrust_target == rhs.thrust_target &&
    lhs.actuator_target == rhs.actuator_target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::DroneTarget_<ContainerAllocator1> & lhs, const ::drone_msgs::DroneTarget_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::DroneTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::DroneTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::DroneTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::DroneTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::DroneTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::DroneTarget_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::DroneTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b13c4477f8a36524e314a3b537e64de4";
  }

  static const char* value(const ::drone_msgs::DroneTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb13c4477f8a36524ULL;
  static const uint64_t static_value2 = 0xe314a3b537e64de4ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::DroneTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/DroneTarget";
  }

  static const char* value(const ::drone_msgs::DroneTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::DroneTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32[3] position_target          ## [m]\n"
"float32[3] velocity_target          ## [m/s]\n"
"float32[3] acceleration_target      ## [m/s/s]\n"
"geometry_msgs/Quaternion q_target   ## quat\n"
"float32[3] euler_target             ## [rad]\n"
"float32[3] rate_target              ## [rad/s]\n"
"float32 thrust_target\n"
"mavros_msgs/ActuatorControl actuator_target\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: mavros_msgs/ActuatorControl\n"
"# raw servo values for direct actuator controls\n"
"#\n"
"# about groups, mixing and channels:\n"
"# https://pixhawk.org/dev/mixing\n"
"\n"
"# constant for mixer group\n"
"uint8 PX4_MIX_FLIGHT_CONTROL = 0\n"
"uint8 PX4_MIX_FLIGHT_CONTROL_VTOL_ALT = 1\n"
"uint8 PX4_MIX_PAYLOAD = 2\n"
"uint8 PX4_MIX_MANUAL_PASSTHROUGH = 3\n"
"#uint8 PX4_MIX_FC_MC_VIRT = 4\n"
"#uint8 PX4_MIX_FC_FW_VIRT = 5\n"
"\n"
"std_msgs/Header header\n"
"uint8 group_mix\n"
"float32[8] controls\n"
;
  }

  static const char* value(const ::drone_msgs::DroneTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::DroneTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position_target);
      stream.next(m.velocity_target);
      stream.next(m.acceleration_target);
      stream.next(m.q_target);
      stream.next(m.euler_target);
      stream.next(m.rate_target);
      stream.next(m.thrust_target);
      stream.next(m.actuator_target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroneTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::DroneTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::DroneTarget_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position_target[]" << std::endl;
    for (size_t i = 0; i < v.position_target.size(); ++i)
    {
      s << indent << "  position_target[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position_target[i]);
    }
    s << indent << "velocity_target[]" << std::endl;
    for (size_t i = 0; i < v.velocity_target.size(); ++i)
    {
      s << indent << "  velocity_target[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity_target[i]);
    }
    s << indent << "acceleration_target[]" << std::endl;
    for (size_t i = 0; i < v.acceleration_target.size(); ++i)
    {
      s << indent << "  acceleration_target[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acceleration_target[i]);
    }
    s << indent << "q_target: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q_target);
    s << indent << "euler_target[]" << std::endl;
    for (size_t i = 0; i < v.euler_target.size(); ++i)
    {
      s << indent << "  euler_target[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.euler_target[i]);
    }
    s << indent << "rate_target[]" << std::endl;
    for (size_t i = 0; i < v.rate_target.size(); ++i)
    {
      s << indent << "  rate_target[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rate_target[i]);
    }
    s << indent << "thrust_target: ";
    Printer<float>::stream(s, indent + "  ", v.thrust_target);
    s << indent << "actuator_target: ";
    s << std::endl;
    Printer< ::mavros_msgs::ActuatorControl_<ContainerAllocator> >::stream(s, indent + "  ", v.actuator_target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_DRONETARGET_H
