// Generated by gencpp from file drone_msgs/Message.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_MESSAGE_H
#define DRONE_MSGS_MESSAGE_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct Message_
{
  typedef Message_<ContainerAllocator> Type;

  Message_()
    : header()
    , message_type(0)
    , source_node()
    , content()  {
    }
  Message_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , message_type(0)
    , source_node(_alloc)
    , content(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_node_type;
  _source_node_type source_node;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _content_type;
  _content_type content;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(WARN)
  #undef WARN
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif

  enum {
    NORMAL = 0u,
    WARN = 1u,
    ERROR = 2u,
  };


  typedef boost::shared_ptr< ::drone_msgs::Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::Message_<ContainerAllocator> const> ConstPtr;

}; // struct Message_

typedef ::drone_msgs::Message_<std::allocator<void> > Message;

typedef boost::shared_ptr< ::drone_msgs::Message > MessagePtr;
typedef boost::shared_ptr< ::drone_msgs::Message const> MessageConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::Message_<ContainerAllocator1> & lhs, const ::drone_msgs::Message_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.message_type == rhs.message_type &&
    lhs.source_node == rhs.source_node &&
    lhs.content == rhs.content;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::Message_<ContainerAllocator1> & lhs, const ::drone_msgs::Message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Message_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "298ffdf82be3ca999f3a78d890347d59";
  }

  static const char* value(const ::drone_msgs::Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x298ffdf82be3ca99ULL;
  static const uint64_t static_value2 = 0x9f3a78d890347d59ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/Message";
  }

  static const char* value(const ::drone_msgs::Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## message_type\n"
"uint8 message_type\n"
"# enum \n"
"uint8 NORMAL = 0  \n"
"uint8 WARN   = 1  \n"
"uint8 ERROR  = 2  \n"
" \n"
"string source_node\n"
"\n"
"string content\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::drone_msgs::Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.message_type);
      stream.next(m.source_node);
      stream.next(m.content);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::Message_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "source_node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source_node);
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.content);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_MESSAGE_H
