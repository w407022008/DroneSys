// Generated by gencpp from file quadrotor_msgs/AutopilotFeedback.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_AUTOPILOTFEEDBACK_H
#define QUADROTOR_MSGS_MESSAGE_AUTOPILOTFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <quadrotor_msgs/LowLevelFeedback.h>
#include <quadrotor_msgs/TrajectoryPoint.h>
#include <nav_msgs/Odometry.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct AutopilotFeedback_
{
  typedef AutopilotFeedback_<ContainerAllocator> Type;

  AutopilotFeedback_()
    : header()
    , autopilot_state(0)
    , control_command_delay()
    , control_computation_time()
    , trajectory_execution_left_duration()
    , trajectories_left_in_queue(0)
    , low_level_feedback()
    , reference_state()
    , state_estimate()  {
    }
  AutopilotFeedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , autopilot_state(0)
    , control_command_delay()
    , control_computation_time()
    , trajectory_execution_left_duration()
    , trajectories_left_in_queue(0)
    , low_level_feedback(_alloc)
    , reference_state(_alloc)
    , state_estimate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _autopilot_state_type;
  _autopilot_state_type autopilot_state;

   typedef ros::Duration _control_command_delay_type;
  _control_command_delay_type control_command_delay;

   typedef ros::Duration _control_computation_time_type;
  _control_computation_time_type control_computation_time;

   typedef ros::Duration _trajectory_execution_left_duration_type;
  _trajectory_execution_left_duration_type trajectory_execution_left_duration;

   typedef uint8_t _trajectories_left_in_queue_type;
  _trajectories_left_in_queue_type trajectories_left_in_queue;

   typedef  ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator>  _low_level_feedback_type;
  _low_level_feedback_type low_level_feedback;

   typedef  ::quadrotor_msgs::TrajectoryPoint_<ContainerAllocator>  _reference_state_type;
  _reference_state_type reference_state;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _state_estimate_type;
  _state_estimate_type state_estimate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(HOVER)
  #undef HOVER
#endif
#if defined(_WIN32) && defined(LAND)
  #undef LAND
#endif
#if defined(_WIN32) && defined(EMERGENCY_LAND)
  #undef EMERGENCY_LAND
#endif
#if defined(_WIN32) && defined(BREAKING)
  #undef BREAKING
#endif
#if defined(_WIN32) && defined(GO_TO_POSE)
  #undef GO_TO_POSE
#endif
#if defined(_WIN32) && defined(VELOCITY_CONTROL)
  #undef VELOCITY_CONTROL
#endif
#if defined(_WIN32) && defined(REFERENCE_CONTROL)
  #undef REFERENCE_CONTROL
#endif
#if defined(_WIN32) && defined(TRAJECTORY_CONTROL)
  #undef TRAJECTORY_CONTROL
#endif
#if defined(_WIN32) && defined(COMMAND_FEEDTHROUGH)
  #undef COMMAND_FEEDTHROUGH
#endif
#if defined(_WIN32) && defined(RC_MANUAL)
  #undef RC_MANUAL
#endif

  enum {
    OFF = 0u,
    START = 1u,
    HOVER = 2u,
    LAND = 3u,
    EMERGENCY_LAND = 4u,
    BREAKING = 5u,
    GO_TO_POSE = 6u,
    VELOCITY_CONTROL = 7u,
    REFERENCE_CONTROL = 8u,
    TRAJECTORY_CONTROL = 9u,
    COMMAND_FEEDTHROUGH = 10u,
    RC_MANUAL = 11u,
  };


  typedef boost::shared_ptr< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct AutopilotFeedback_

typedef ::quadrotor_msgs::AutopilotFeedback_<std::allocator<void> > AutopilotFeedback;

typedef boost::shared_ptr< ::quadrotor_msgs::AutopilotFeedback > AutopilotFeedbackPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::AutopilotFeedback const> AutopilotFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.autopilot_state == rhs.autopilot_state &&
    lhs.control_command_delay == rhs.control_command_delay &&
    lhs.control_computation_time == rhs.control_computation_time &&
    lhs.trajectory_execution_left_duration == rhs.trajectory_execution_left_duration &&
    lhs.trajectories_left_in_queue == rhs.trajectories_left_in_queue &&
    lhs.low_level_feedback == rhs.low_level_feedback &&
    lhs.reference_state == rhs.reference_state &&
    lhs.state_estimate == rhs.state_estimate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c8e08f7c3465bc93596097f7c8ecc39";
  }

  static const char* value(const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c8e08f7c3465bc9ULL;
  static const uint64_t static_value2 = 0x3596097f7c8ecc39ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/AutopilotFeedback";
  }

  static const char* value(const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Autopilot state enums\n"
"uint8 OFF=0\n"
"uint8 START=1\n"
"uint8 HOVER=2\n"
"uint8 LAND=3\n"
"uint8 EMERGENCY_LAND=4\n"
"uint8 BREAKING=5\n"
"uint8 GO_TO_POSE=6\n"
"uint8 VELOCITY_CONTROL=7\n"
"uint8 REFERENCE_CONTROL=8\n"
"uint8 TRAJECTORY_CONTROL=9\n"
"uint8 COMMAND_FEEDTHROUGH=10\n"
"uint8 RC_MANUAL=11\n"
"\n"
"\n"
"Header header\n"
"\n"
"# Autopilot state as defined above. This reflects what is implemented in\n"
"# autopilot/include/autopilot/autopilot.h\n"
"uint8 autopilot_state\n"
"\n"
"# Control command delay\n"
"duration control_command_delay\n"
"\n"
"# Controller computation time [s]\n"
"duration control_computation_time\n"
"\n"
"# Duration left of the trajectories in the queue\n"
"# Only valid in TRAJECTORY_CONTROL mode\n"
"duration trajectory_execution_left_duration\n"
"\n"
"# Number of trajectories that were sent to the autopilot and are stored in its\n"
"# queue. Only valid in TRAJECTORY_CONTROL mode\n"
"uint8 trajectories_left_in_queue\n"
"\n"
"# Low level feedback\n"
"quadrotor_msgs/LowLevelFeedback low_level_feedback\n"
"\n"
"# Desired state used to compute the control command\n"
"quadrotor_msgs/TrajectoryPoint reference_state\n"
"\n"
"# State estimate used to compute the control command\n"
"nav_msgs/Odometry state_estimate\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/LowLevelFeedback\n"
"# battery state enums\n"
"uint8 BAT_INVALID=0\n"
"uint8 BAT_GOOD=1\n"
"uint8 BAT_LOW=2\n"
"uint8 BAT_CRITICAL=3\n"
"\n"
"# control mode enums as defined in ControlCommand.msg\n"
"uint8 NONE=0\n"
"uint8 ATTITUDE=1\n"
"uint8 BODY_RATES=2\n"
"uint8 ANGULAR_ACCELERATION=3\n"
"uint8 ROTOR_THRUSTS=4\n"
"# Additionally to the control command we want to know whether an RC has taken\n"
"# over from the low level feedback\n"
"uint8 RC_MANUAL=10\n"
"\n"
"Header header\n"
"\n"
"# Battery information\n"
"float32 battery_voltage\n"
"uint8 battery_state\n"
"\n"
"# Control mode as defined above\n"
"uint8 control_mode\n"
"\n"
"# Motor speed feedback [rpm]\n"
"int16[] motor_speeds\n"
"\n"
"# Thrust mapping coefficients\n"
"# thrust = thrust_mapping_coeffs[2] * u^2 + thrust_mapping_coeffs[1] * u +\n"
"#     thrust_mapping_coeffs[0]\n"
"float64[] thrust_mapping_coeffs\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/TrajectoryPoint\n"
"duration time_from_start\n"
"\n"
"geometry_msgs/Pose pose\n"
"\n"
"geometry_msgs/Twist velocity\n"
"\n"
"geometry_msgs/Twist acceleration\n"
"\n"
"geometry_msgs/Twist jerk\n"
"\n"
"geometry_msgs/Twist snap\n"
"\n"
"# Heading angle with respect to world frame [rad]\n"
"float64 heading\n"
"\n"
"# First derivative of the heading angle [rad/s]\n"
"float64 heading_rate\n"
"\n"
"# Second derivative of the heading angle [rad/s^2]\n"
"float64 heading_acceleration\n"
"\n"
"# Collective thrust [m/s^2]\n"
"float64 thrust\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
;
  }

  static const char* value(const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.autopilot_state);
      stream.next(m.control_command_delay);
      stream.next(m.control_computation_time);
      stream.next(m.trajectory_execution_left_duration);
      stream.next(m.trajectories_left_in_queue);
      stream.next(m.low_level_feedback);
      stream.next(m.reference_state);
      stream.next(m.state_estimate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutopilotFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::AutopilotFeedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "autopilot_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autopilot_state);
    s << indent << "control_command_delay: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.control_command_delay);
    s << indent << "control_computation_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.control_computation_time);
    s << indent << "trajectory_execution_left_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.trajectory_execution_left_duration);
    s << indent << "trajectories_left_in_queue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trajectories_left_in_queue);
    s << indent << "low_level_feedback: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::LowLevelFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.low_level_feedback);
    s << indent << "reference_state: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.reference_state);
    s << indent << "state_estimate: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.state_estimate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_AUTOPILOTFEEDBACK_H
