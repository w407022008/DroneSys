# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/DroneTarget.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mavros_msgs.msg
import std_msgs.msg

class DroneTarget(genpy.Message):
  _md5sum = "b13c4477f8a36524e314a3b537e64de4"
  _type = "drone_msgs/DroneTarget"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

float32[3] position_target          ## [m]
float32[3] velocity_target          ## [m/s]
float32[3] acceleration_target      ## [m/s/s]
geometry_msgs/Quaternion q_target   ## quat
float32[3] euler_target             ## [rad]
float32[3] rate_target              ## [rad/s]
float32 thrust_target
mavros_msgs/ActuatorControl actuator_target

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: mavros_msgs/ActuatorControl
# raw servo values for direct actuator controls
#
# about groups, mixing and channels:
# https://pixhawk.org/dev/mixing

# constant for mixer group
uint8 PX4_MIX_FLIGHT_CONTROL = 0
uint8 PX4_MIX_FLIGHT_CONTROL_VTOL_ALT = 1
uint8 PX4_MIX_PAYLOAD = 2
uint8 PX4_MIX_MANUAL_PASSTHROUGH = 3
#uint8 PX4_MIX_FC_MC_VIRT = 4
#uint8 PX4_MIX_FC_FW_VIRT = 5

std_msgs/Header header
uint8 group_mix
float32[8] controls
"""
  __slots__ = ['header','position_target','velocity_target','acceleration_target','q_target','euler_target','rate_target','thrust_target','actuator_target']
  _slot_types = ['std_msgs/Header','float32[3]','float32[3]','float32[3]','geometry_msgs/Quaternion','float32[3]','float32[3]','float32','mavros_msgs/ActuatorControl']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,position_target,velocity_target,acceleration_target,q_target,euler_target,rate_target,thrust_target,actuator_target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DroneTarget, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position_target is None:
        self.position_target = [0.] * 3
      if self.velocity_target is None:
        self.velocity_target = [0.] * 3
      if self.acceleration_target is None:
        self.acceleration_target = [0.] * 3
      if self.q_target is None:
        self.q_target = geometry_msgs.msg.Quaternion()
      if self.euler_target is None:
        self.euler_target = [0.] * 3
      if self.rate_target is None:
        self.rate_target = [0.] * 3
      if self.thrust_target is None:
        self.thrust_target = 0.
      if self.actuator_target is None:
        self.actuator_target = mavros_msgs.msg.ActuatorControl()
    else:
      self.header = std_msgs.msg.Header()
      self.position_target = [0.] * 3
      self.velocity_target = [0.] * 3
      self.acceleration_target = [0.] * 3
      self.q_target = geometry_msgs.msg.Quaternion()
      self.euler_target = [0.] * 3
      self.rate_target = [0.] * 3
      self.thrust_target = 0.
      self.actuator_target = mavros_msgs.msg.ActuatorControl()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3f().pack(*self.position_target))
      buff.write(_get_struct_3f().pack(*self.velocity_target))
      buff.write(_get_struct_3f().pack(*self.acceleration_target))
      _x = self
      buff.write(_get_struct_4d().pack(_x.q_target.x, _x.q_target.y, _x.q_target.z, _x.q_target.w))
      buff.write(_get_struct_3f().pack(*self.euler_target))
      buff.write(_get_struct_3f().pack(*self.rate_target))
      _x = self
      buff.write(_get_struct_f3I().pack(_x.thrust_target, _x.actuator_target.header.seq, _x.actuator_target.header.stamp.secs, _x.actuator_target.header.stamp.nsecs))
      _x = self.actuator_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.actuator_target.group_mix
      buff.write(_get_struct_B().pack(_x))
      buff.write(_get_struct_8f().pack(*self.actuator_target.controls))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.q_target is None:
        self.q_target = geometry_msgs.msg.Quaternion()
      if self.actuator_target is None:
        self.actuator_target = mavros_msgs.msg.ActuatorControl()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.position_target = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity_target = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.acceleration_target = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.q_target.x, _x.q_target.y, _x.q_target.z, _x.q_target.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 12
      self.euler_target = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.rate_target = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.thrust_target, _x.actuator_target.header.seq, _x.actuator_target.header.stamp.secs, _x.actuator_target.header.stamp.nsecs,) = _get_struct_f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actuator_target.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.actuator_target.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.actuator_target.group_mix,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 32
      self.actuator_target.controls = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.position_target.tostring())
      buff.write(self.velocity_target.tostring())
      buff.write(self.acceleration_target.tostring())
      _x = self
      buff.write(_get_struct_4d().pack(_x.q_target.x, _x.q_target.y, _x.q_target.z, _x.q_target.w))
      buff.write(self.euler_target.tostring())
      buff.write(self.rate_target.tostring())
      _x = self
      buff.write(_get_struct_f3I().pack(_x.thrust_target, _x.actuator_target.header.seq, _x.actuator_target.header.stamp.secs, _x.actuator_target.header.stamp.nsecs))
      _x = self.actuator_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.actuator_target.group_mix
      buff.write(_get_struct_B().pack(_x))
      buff.write(self.actuator_target.controls.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.q_target is None:
        self.q_target = geometry_msgs.msg.Quaternion()
      if self.actuator_target is None:
        self.actuator_target = mavros_msgs.msg.ActuatorControl()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.position_target = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.velocity_target = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.acceleration_target = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 32
      (_x.q_target.x, _x.q_target.y, _x.q_target.z, _x.q_target.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 12
      self.euler_target = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.rate_target = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 16
      (_x.thrust_target, _x.actuator_target.header.seq, _x.actuator_target.header.stamp.secs, _x.actuator_target.header.stamp.nsecs,) = _get_struct_f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actuator_target.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.actuator_target.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.actuator_target.group_mix,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 32
      self.actuator_target.controls = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f3I = None
def _get_struct_f3I():
    global _struct_f3I
    if _struct_f3I is None:
        _struct_f3I = struct.Struct("<f3I")
    return _struct_f3I
