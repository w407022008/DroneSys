# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/RCInput.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RCInput(genpy.Message):
  _md5sum = "13d10a65cefb07444f918f9ce0babb28"
  _type = "drone_msgs/RCInput"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """## Radio Control Input
std_msgs/Header header

# Data Source
uint8 DISABLE = 0
uint8 MAVROS_MANUAL_CONTROL = 1
uint8 DRIVER_JOYSTICK = 2

float32 rc_x             # stick position in x direction -1..1
                         # in general corresponds to forward/back motion or pitch of vehicle,
                         # in general a positive value means forward or negative pitch and
                         # a negative value means backward or positive pitch
float32 rc_y             # stick position in y direction -1..1
                         # in general corresponds to right/left motion or roll of vehicle,
                         # in general a positive value means right or positive roll and
                         # a negative value means left or negative roll
float32 rc_z             # throttle stick position 0..1
                         # in general corresponds to up/down motion or thrust of vehicle,
                         # in general the value corresponds to the demanded throttle by the user,
                         # if the input is used for setting the setpoint of a vertical position
                         # controller any value > 0.5 means up and any value < 0.5 means down
float32 rc_r             # yaw stick/twist position, -1..1
                         # in general corresponds to the righthand rotation around the vertical
                         # (downwards) axis of the vehicle
uint32 buttons           # Binary

uint8 goal_enable        # push down(1):enable; release(0):disable

int32 data_source # determin the data source

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  DISABLE = 0
  MAVROS_MANUAL_CONTROL = 1
  DRIVER_JOYSTICK = 2

  __slots__ = ['header','rc_x','rc_y','rc_z','rc_r','buttons','goal_enable','data_source']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','uint32','uint8','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,rc_x,rc_y,rc_z,rc_r,buttons,goal_enable,data_source

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RCInput, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rc_x is None:
        self.rc_x = 0.
      if self.rc_y is None:
        self.rc_y = 0.
      if self.rc_z is None:
        self.rc_z = 0.
      if self.rc_r is None:
        self.rc_r = 0.
      if self.buttons is None:
        self.buttons = 0
      if self.goal_enable is None:
        self.goal_enable = 0
      if self.data_source is None:
        self.data_source = 0
    else:
      self.header = std_msgs.msg.Header()
      self.rc_x = 0.
      self.rc_y = 0.
      self.rc_z = 0.
      self.rc_r = 0.
      self.buttons = 0
      self.goal_enable = 0
      self.data_source = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4fIBi().pack(_x.rc_x, _x.rc_y, _x.rc_z, _x.rc_r, _x.buttons, _x.goal_enable, _x.data_source))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.rc_x, _x.rc_y, _x.rc_z, _x.rc_r, _x.buttons, _x.goal_enable, _x.data_source,) = _get_struct_4fIBi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4fIBi().pack(_x.rc_x, _x.rc_y, _x.rc_z, _x.rc_r, _x.buttons, _x.goal_enable, _x.data_source))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.rc_x, _x.rc_y, _x.rc_z, _x.rc_r, _x.buttons, _x.goal_enable, _x.data_source,) = _get_struct_4fIBi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4fIBi = None
def _get_struct_4fIBi():
    global _struct_4fIBi
    if _struct_4fIBi is None:
        _struct_4fIBi = struct.Struct("<4fIBi")
    return _struct_4fIBi
