# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/DroneState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class DroneState(genpy.Message):
  _md5sum = "42ddaae3b4854fce0ad7e5cb7bf4370a"
  _type = "drone_msgs/DroneState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## is connected with PX4 flight controller
bool connected
bool armed
## landed / in-air
bool landed
## Control mode in PX4 
string mode

float32 time_from_start             ## [s]

## Kinmatic states
float32[3] position                 ## [m]
float32  rel_alt                    ## [m] only for outdoor
float32[3] velocity                 ## [m/s]
float32[3] attitude                 ## [rad]
geometry_msgs/Quaternion attitude_q ## quat
float32[3] attitude_rate            ## [rad/s]

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','connected','armed','landed','mode','time_from_start','position','rel_alt','velocity','attitude','attitude_q','attitude_rate']
  _slot_types = ['std_msgs/Header','bool','bool','bool','string','float32','float32[3]','float32','float32[3]','float32[3]','geometry_msgs/Quaternion','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,connected,armed,landed,mode,time_from_start,position,rel_alt,velocity,attitude,attitude_q,attitude_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DroneState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.connected is None:
        self.connected = False
      if self.armed is None:
        self.armed = False
      if self.landed is None:
        self.landed = False
      if self.mode is None:
        self.mode = ''
      if self.time_from_start is None:
        self.time_from_start = 0.
      if self.position is None:
        self.position = [0.] * 3
      if self.rel_alt is None:
        self.rel_alt = 0.
      if self.velocity is None:
        self.velocity = [0.] * 3
      if self.attitude is None:
        self.attitude = [0.] * 3
      if self.attitude_q is None:
        self.attitude_q = geometry_msgs.msg.Quaternion()
      if self.attitude_rate is None:
        self.attitude_rate = [0.] * 3
    else:
      self.header = std_msgs.msg.Header()
      self.connected = False
      self.armed = False
      self.landed = False
      self.mode = ''
      self.time_from_start = 0.
      self.position = [0.] * 3
      self.rel_alt = 0.
      self.velocity = [0.] * 3
      self.attitude = [0.] * 3
      self.attitude_q = geometry_msgs.msg.Quaternion()
      self.attitude_rate = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.connected, _x.armed, _x.landed))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time_from_start
      buff.write(_get_struct_f().pack(_x))
      buff.write(_get_struct_3f().pack(*self.position))
      _x = self.rel_alt
      buff.write(_get_struct_f().pack(_x))
      buff.write(_get_struct_3f().pack(*self.velocity))
      buff.write(_get_struct_3f().pack(*self.attitude))
      _x = self
      buff.write(_get_struct_4d().pack(_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w))
      buff.write(_get_struct_3f().pack(*self.attitude_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.attitude_q is None:
        self.attitude_q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.connected, _x.armed, _x.landed,) = _get_struct_3B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.armed = bool(self.armed)
      self.landed = bool(self.landed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      start = end
      end += 4
      (self.time_from_start,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 12
      self.position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (self.rel_alt,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.attitude = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 12
      self.attitude_rate = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.connected, _x.armed, _x.landed))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time_from_start
      buff.write(_get_struct_f().pack(_x))
      buff.write(self.position.tostring())
      _x = self.rel_alt
      buff.write(_get_struct_f().pack(_x))
      buff.write(self.velocity.tostring())
      buff.write(self.attitude.tostring())
      _x = self
      buff.write(_get_struct_4d().pack(_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w))
      buff.write(self.attitude_rate.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.attitude_q is None:
        self.attitude_q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.connected, _x.armed, _x.landed,) = _get_struct_3B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.armed = bool(self.armed)
      self.landed = bool(self.landed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      start = end
      end += 4
      (self.time_from_start,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 12
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 4
      (self.rel_alt,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 12
      self.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.attitude = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 32
      (_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 12
      self.attitude_rate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
