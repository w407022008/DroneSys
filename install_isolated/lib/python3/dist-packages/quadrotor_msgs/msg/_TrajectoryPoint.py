# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/TrajectoryPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class TrajectoryPoint(genpy.Message):
  _md5sum = "1839a691c60e7ab9d8c3da0ab668b51b"
  _type = "quadrotor_msgs/TrajectoryPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """duration time_from_start

geometry_msgs/Pose pose

geometry_msgs/Twist velocity

geometry_msgs/Twist acceleration

geometry_msgs/Twist jerk

geometry_msgs/Twist snap

# Heading angle with respect to world frame [rad]
float64 heading

# First derivative of the heading angle [rad/s]
float64 heading_rate

# Second derivative of the heading angle [rad/s^2]
float64 heading_acceleration

# Collective thrust [m/s^2]
float64 thrust
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['time_from_start','pose','velocity','acceleration','jerk','snap','heading','heading_rate','heading_acceleration','thrust']
  _slot_types = ['duration','geometry_msgs/Pose','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_from_start,pose,velocity,acceleration,jerk,snap,heading,heading_rate,heading_acceleration,thrust

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Twist()
      if self.snap is None:
        self.snap = geometry_msgs.msg.Twist()
      if self.heading is None:
        self.heading = 0.
      if self.heading_rate is None:
        self.heading_rate = 0.
      if self.heading_acceleration is None:
        self.heading_acceleration = 0.
      if self.thrust is None:
        self.thrust = 0.
    else:
      self.time_from_start = genpy.Duration()
      self.pose = geometry_msgs.msg.Pose()
      self.velocity = geometry_msgs.msg.Twist()
      self.acceleration = geometry_msgs.msg.Twist()
      self.jerk = geometry_msgs.msg.Twist()
      self.snap = geometry_msgs.msg.Twist()
      self.heading = 0.
      self.heading_rate = 0.
      self.heading_acceleration = 0.
      self.thrust = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i35d().pack(_x.time_from_start.secs, _x.time_from_start.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.jerk.linear.x, _x.jerk.linear.y, _x.jerk.linear.z, _x.jerk.angular.x, _x.jerk.angular.y, _x.jerk.angular.z, _x.snap.linear.x, _x.snap.linear.y, _x.snap.linear.z, _x.snap.angular.x, _x.snap.angular.y, _x.snap.angular.z, _x.heading, _x.heading_rate, _x.heading_acceleration, _x.thrust))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Twist()
      if self.snap is None:
        self.snap = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 288
      (_x.time_from_start.secs, _x.time_from_start.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.jerk.linear.x, _x.jerk.linear.y, _x.jerk.linear.z, _x.jerk.angular.x, _x.jerk.angular.y, _x.jerk.angular.z, _x.snap.linear.x, _x.snap.linear.y, _x.snap.linear.z, _x.snap.angular.x, _x.snap.angular.y, _x.snap.angular.z, _x.heading, _x.heading_rate, _x.heading_acceleration, _x.thrust,) = _get_struct_2i35d().unpack(str[start:end])
      self.time_from_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i35d().pack(_x.time_from_start.secs, _x.time_from_start.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.jerk.linear.x, _x.jerk.linear.y, _x.jerk.linear.z, _x.jerk.angular.x, _x.jerk.angular.y, _x.jerk.angular.z, _x.snap.linear.x, _x.snap.linear.y, _x.snap.linear.z, _x.snap.angular.x, _x.snap.angular.y, _x.snap.angular.z, _x.heading, _x.heading_rate, _x.heading_acceleration, _x.thrust))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Twist()
      if self.snap is None:
        self.snap = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 288
      (_x.time_from_start.secs, _x.time_from_start.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.jerk.linear.x, _x.jerk.linear.y, _x.jerk.linear.z, _x.jerk.angular.x, _x.jerk.angular.y, _x.jerk.angular.z, _x.snap.linear.x, _x.snap.linear.y, _x.snap.linear.z, _x.snap.angular.x, _x.snap.angular.y, _x.snap.angular.z, _x.heading, _x.heading_rate, _x.heading_acceleration, _x.thrust,) = _get_struct_2i35d().unpack(str[start:end])
      self.time_from_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i35d = None
def _get_struct_2i35d():
    global _struct_2i35d
    if _struct_2i35d is None:
        _struct_2i35d = struct.Struct("<2i35d")
    return _struct_2i35d
