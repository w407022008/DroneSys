// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Odometry.proto

#ifndef PROTOBUF_INCLUDED_Odometry_2eproto
#define PROTOBUF_INCLUDED_Odometry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "quaternion.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Odometry_2eproto 

namespace protobuf_Odometry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Odometry_2eproto
namespace nav_msgs {
namespace msgs {
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
}  // namespace msgs
}  // namespace nav_msgs
namespace google {
namespace protobuf {
template<> ::nav_msgs::msgs::Odometry* Arena::CreateMaybeMessage<::nav_msgs::msgs::Odometry>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nav_msgs {
namespace msgs {

// ===================================================================

class Odometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nav_msgs.msgs.Odometry) */ {
 public:
  Odometry();
  virtual ~Odometry();

  Odometry(const Odometry& from);

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Odometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Odometry* other);
  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(NULL);
  }

  Odometry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pose_covariance = 6 [packed = true];
  int pose_covariance_size() const;
  void clear_pose_covariance();
  static const int kPoseCovarianceFieldNumber = 6;
  float pose_covariance(int index) const;
  void set_pose_covariance(int index, float value);
  void add_pose_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      pose_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pose_covariance();

  // repeated float velocity_covariance = 7 [packed = true];
  int velocity_covariance_size() const;
  void clear_velocity_covariance();
  static const int kVelocityCovarianceFieldNumber = 7;
  float velocity_covariance(int index) const;
  void set_velocity_covariance(int index, float value);
  void add_velocity_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      velocity_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_velocity_covariance();

  // required .gazebo.msgs.Vector3d position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::gazebo::msgs::Vector3d& _internal_position() const;
  public:
  const ::gazebo::msgs::Vector3d& position() const;
  ::gazebo::msgs::Vector3d* release_position();
  ::gazebo::msgs::Vector3d* mutable_position();
  void set_allocated_position(::gazebo::msgs::Vector3d* position);

  // required .gazebo.msgs.Quaternion orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  public:
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required .gazebo.msgs.Vector3d linear_velocity = 4;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 4;
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_velocity() const;
  public:
  const ::gazebo::msgs::Vector3d& linear_velocity() const;
  ::gazebo::msgs::Vector3d* release_linear_velocity();
  ::gazebo::msgs::Vector3d* mutable_linear_velocity();
  void set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity);

  // required .gazebo.msgs.Vector3d angular_velocity = 5;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 5;
  private:
  const ::gazebo::msgs::Vector3d& _internal_angular_velocity() const;
  public:
  const ::gazebo::msgs::Vector3d& angular_velocity() const;
  ::gazebo::msgs::Vector3d* release_angular_velocity();
  ::gazebo::msgs::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity);

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:nav_msgs.msgs.Odometry)
 private:
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_position();
  void clear_has_position();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_linear_velocity();
  void clear_has_linear_velocity();
  void set_has_angular_velocity();
  void clear_has_angular_velocity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > pose_covariance_;
  mutable int _pose_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > velocity_covariance_;
  mutable int _velocity_covariance_cached_byte_size_;
  ::gazebo::msgs::Vector3d* position_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* linear_velocity_;
  ::gazebo::msgs::Vector3d* angular_velocity_;
  ::google::protobuf::int64 time_usec_;
  friend struct ::protobuf_Odometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Odometry

// required int64 time_usec = 1;
inline bool Odometry::has_time_usec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Odometry::set_has_time_usec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Odometry::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Odometry::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.time_usec)
  return time_usec_;
}
inline void Odometry::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:nav_msgs.msgs.Odometry.time_usec)
}

// required .gazebo.msgs.Vector3d position = 2;
inline bool Odometry::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Odometry::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Odometry::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Vector3d& Odometry::_internal_position() const {
  return *position_;
}
inline const ::gazebo::msgs::Vector3d& Odometry::position() const {
  const ::gazebo::msgs::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Odometry::release_position() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.position)
  clear_has_position();
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.position)
  return position_;
}
inline void Odometry::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.position)
}

// required .gazebo.msgs.Quaternion orientation = 3;
inline bool Odometry::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Odometry::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Odometry::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Quaternion& Odometry::_internal_orientation() const {
  return *orientation_;
}
inline const ::gazebo::msgs::Quaternion& Odometry::orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline ::gazebo::msgs::Quaternion* Odometry::release_orientation() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Quaternion* Odometry::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.orientation)
  return orientation_;
}
inline void Odometry::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.orientation)
}

// required .gazebo.msgs.Vector3d linear_velocity = 4;
inline bool Odometry::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Odometry::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Odometry::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::gazebo::msgs::Vector3d& Odometry::_internal_linear_velocity() const {
  return *linear_velocity_;
}
inline const ::gazebo::msgs::Vector3d& Odometry::linear_velocity() const {
  const ::gazebo::msgs::Vector3d* p = linear_velocity_;
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.linear_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Odometry::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.linear_velocity)
  clear_has_linear_velocity();
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.linear_velocity)
  return linear_velocity_;
}
inline void Odometry::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.linear_velocity)
}

// required .gazebo.msgs.Vector3d angular_velocity = 5;
inline bool Odometry::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Odometry::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Odometry::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::gazebo::msgs::Vector3d& Odometry::_internal_angular_velocity() const {
  return *angular_velocity_;
}
inline const ::gazebo::msgs::Vector3d& Odometry::angular_velocity() const {
  const ::gazebo::msgs::Vector3d* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Odometry::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:nav_msgs.msgs.Odometry.angular_velocity)
  clear_has_angular_velocity();
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Odometry::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nav_msgs.msgs.Odometry.angular_velocity)
  return angular_velocity_;
}
inline void Odometry::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.msgs.Odometry.angular_velocity)
}

// repeated float pose_covariance = 6 [packed = true];
inline int Odometry::pose_covariance_size() const {
  return pose_covariance_.size();
}
inline void Odometry::clear_pose_covariance() {
  pose_covariance_.Clear();
}
inline float Odometry::pose_covariance(int index) const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.pose_covariance)
  return pose_covariance_.Get(index);
}
inline void Odometry::set_pose_covariance(int index, float value) {
  pose_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav_msgs.msgs.Odometry.pose_covariance)
}
inline void Odometry::add_pose_covariance(float value) {
  pose_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:nav_msgs.msgs.Odometry.pose_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Odometry::pose_covariance() const {
  // @@protoc_insertion_point(field_list:nav_msgs.msgs.Odometry.pose_covariance)
  return pose_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Odometry::mutable_pose_covariance() {
  // @@protoc_insertion_point(field_mutable_list:nav_msgs.msgs.Odometry.pose_covariance)
  return &pose_covariance_;
}

// repeated float velocity_covariance = 7 [packed = true];
inline int Odometry::velocity_covariance_size() const {
  return velocity_covariance_.size();
}
inline void Odometry::clear_velocity_covariance() {
  velocity_covariance_.Clear();
}
inline float Odometry::velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:nav_msgs.msgs.Odometry.velocity_covariance)
  return velocity_covariance_.Get(index);
}
inline void Odometry::set_velocity_covariance(int index, float value) {
  velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav_msgs.msgs.Odometry.velocity_covariance)
}
inline void Odometry::add_velocity_covariance(float value) {
  velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:nav_msgs.msgs.Odometry.velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Odometry::velocity_covariance() const {
  // @@protoc_insertion_point(field_list:nav_msgs.msgs.Odometry.velocity_covariance)
  return velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Odometry::mutable_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:nav_msgs.msgs.Odometry.velocity_covariance)
  return &velocity_covariance_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace nav_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Odometry_2eproto
