// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpticalFlow.proto

#include "OpticalFlow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {
class OpticalFlowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpticalFlow>
      _instance;
} _OpticalFlow_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace protobuf_OpticalFlow_2eproto {
static void InitDefaultsOpticalFlow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::msgs::_OpticalFlow_default_instance_;
    new (ptr) ::sensor_msgs::msgs::OpticalFlow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::msgs::OpticalFlow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpticalFlow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpticalFlow}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OpticalFlow.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, time_usec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integration_time_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_xgyro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_ygyro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, integrated_zgyro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, time_delta_distance_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::OpticalFlow, distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::sensor_msgs::msgs::OpticalFlow)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_msgs::msgs::_OpticalFlow_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "OpticalFlow.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021OpticalFlow.proto\022\020sensor_msgs.msgs\"\242\002"
      "\n\013OpticalFlow\022\021\n\ttime_usec\030\001 \002(\003\022\021\n\tsens"
      "or_id\030\002 \002(\005\022\033\n\023integration_time_us\030\003 \002(\005"
      "\022\024\n\014integrated_x\030\004 \002(\002\022\024\n\014integrated_y\030\005"
      " \002(\002\022\030\n\020integrated_xgyro\030\006 \002(\002\022\030\n\020integr"
      "ated_ygyro\030\007 \002(\002\022\030\n\020integrated_zgyro\030\010 \002"
      "(\002\022\023\n\013temperature\030\t \002(\002\022\017\n\007quality\030\n \002(\005"
      "\022\036\n\026time_delta_distance_us\030\013 \002(\005\022\020\n\010dist"
      "ance\030\014 \002(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OpticalFlow.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_OpticalFlow_2eproto
namespace sensor_msgs {
namespace msgs {

// ===================================================================

void OpticalFlow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalFlow::kTimeUsecFieldNumber;
const int OpticalFlow::kSensorIdFieldNumber;
const int OpticalFlow::kIntegrationTimeUsFieldNumber;
const int OpticalFlow::kIntegratedXFieldNumber;
const int OpticalFlow::kIntegratedYFieldNumber;
const int OpticalFlow::kIntegratedXgyroFieldNumber;
const int OpticalFlow::kIntegratedYgyroFieldNumber;
const int OpticalFlow::kIntegratedZgyroFieldNumber;
const int OpticalFlow::kTemperatureFieldNumber;
const int OpticalFlow::kQualityFieldNumber;
const int OpticalFlow::kTimeDeltaDistanceUsFieldNumber;
const int OpticalFlow::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalFlow::OpticalFlow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_OpticalFlow_2eproto::scc_info_OpticalFlow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.OpticalFlow)
}
OpticalFlow::OpticalFlow(const OpticalFlow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.OpticalFlow)
}

void OpticalFlow::SharedCtor() {
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(distance_));
}

OpticalFlow::~OpticalFlow() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.OpticalFlow)
  SharedDtor();
}

void OpticalFlow::SharedDtor() {
}

void OpticalFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpticalFlow::descriptor() {
  ::protobuf_OpticalFlow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_OpticalFlow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpticalFlow& OpticalFlow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_OpticalFlow_2eproto::scc_info_OpticalFlow.base);
  return *internal_default_instance();
}


void OpticalFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.OpticalFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&integrated_zgyro_) -
        reinterpret_cast<char*>(&time_usec_)) + sizeof(integrated_zgyro_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&temperature_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpticalFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.OpticalFlow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sensor_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sensor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 integration_time_us = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_integration_time_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integration_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float integrated_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_integrated_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float integrated_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_integrated_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float integrated_xgyro = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_integrated_xgyro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_xgyro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float integrated_ygyro = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_integrated_ygyro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_ygyro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float integrated_zgyro = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_integrated_zgyro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_zgyro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float temperature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 time_delta_distance_us = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_time_delta_distance_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_delta_distance_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.OpticalFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.OpticalFlow)
  return false;
#undef DO_
}

void OpticalFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.OpticalFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required int32 sensor_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sensor_id(), output);
  }

  // required int32 integration_time_us = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integration_time_us(), output);
  }

  // required float integrated_x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->integrated_x(), output);
  }

  // required float integrated_y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->integrated_y(), output);
  }

  // required float integrated_xgyro = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->integrated_xgyro(), output);
  }

  // required float integrated_ygyro = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->integrated_ygyro(), output);
  }

  // required float integrated_zgyro = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->integrated_zgyro(), output);
  }

  // required float temperature = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->temperature(), output);
  }

  // required int32 quality = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
  }

  // required int32 time_delta_distance_us = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->time_delta_distance_us(), output);
  }

  // required float distance = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.OpticalFlow)
}

::google::protobuf::uint8* OpticalFlow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.OpticalFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required int32 sensor_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sensor_id(), target);
  }

  // required int32 integration_time_us = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integration_time_us(), target);
  }

  // required float integrated_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->integrated_x(), target);
  }

  // required float integrated_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->integrated_y(), target);
  }

  // required float integrated_xgyro = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->integrated_xgyro(), target);
  }

  // required float integrated_ygyro = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->integrated_ygyro(), target);
  }

  // required float integrated_zgyro = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->integrated_zgyro(), target);
  }

  // required float temperature = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->temperature(), target);
  }

  // required int32 quality = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
  }

  // required int32 time_delta_distance_us = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->time_delta_distance_us(), target);
  }

  // required float distance = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.OpticalFlow)
  return target;
}

size_t OpticalFlow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.OpticalFlow)
  size_t total_size = 0;

  if (has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  if (has_sensor_id()) {
    // required int32 sensor_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensor_id());
  }

  if (has_integration_time_us()) {
    // required int32 integration_time_us = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integration_time_us());
  }

  if (has_integrated_x()) {
    // required float integrated_x = 4;
    total_size += 1 + 4;
  }

  if (has_integrated_y()) {
    // required float integrated_y = 5;
    total_size += 1 + 4;
  }

  if (has_integrated_xgyro()) {
    // required float integrated_xgyro = 6;
    total_size += 1 + 4;
  }

  if (has_integrated_ygyro()) {
    // required float integrated_ygyro = 7;
    total_size += 1 + 4;
  }

  if (has_integrated_zgyro()) {
    // required float integrated_zgyro = 8;
    total_size += 1 + 4;
  }

  if (has_temperature()) {
    // required float temperature = 9;
    total_size += 1 + 4;
  }

  if (has_quality()) {
    // required int32 quality = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_time_delta_distance_us()) {
    // required int32 time_delta_distance_us = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_delta_distance_us());
  }

  if (has_distance()) {
    // required float distance = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t OpticalFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.OpticalFlow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

    // required int32 sensor_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensor_id());

    // required int32 integration_time_us = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integration_time_us());

    // required float integrated_x = 4;
    total_size += 1 + 4;

    // required float integrated_y = 5;
    total_size += 1 + 4;

    // required float integrated_xgyro = 6;
    total_size += 1 + 4;

    // required float integrated_ygyro = 7;
    total_size += 1 + 4;

    // required float integrated_zgyro = 8;
    total_size += 1 + 4;

    // required float temperature = 9;
    total_size += 1 + 4;

    // required int32 quality = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required int32 time_delta_distance_us = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_delta_distance_us());

    // required float distance = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpticalFlow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.OpticalFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const OpticalFlow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpticalFlow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.OpticalFlow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.OpticalFlow)
    MergeFrom(*source);
  }
}

void OpticalFlow::MergeFrom(const OpticalFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.OpticalFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_usec_ = from.time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      integration_time_us_ = from.integration_time_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      integrated_x_ = from.integrated_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      integrated_y_ = from.integrated_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      integrated_xgyro_ = from.integrated_xgyro_;
    }
    if (cached_has_bits & 0x00000040u) {
      integrated_ygyro_ = from.integrated_ygyro_;
    }
    if (cached_has_bits & 0x00000080u) {
      integrated_zgyro_ = from.integrated_zgyro_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_delta_distance_us_ = from.time_delta_distance_us_;
    }
    if (cached_has_bits & 0x00000800u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpticalFlow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.OpticalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticalFlow::CopyFrom(const OpticalFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.OpticalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void OpticalFlow::Swap(OpticalFlow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalFlow::InternalSwap(OpticalFlow* other) {
  using std::swap;
  swap(time_usec_, other->time_usec_);
  swap(sensor_id_, other->sensor_id_);
  swap(integration_time_us_, other->integration_time_us_);
  swap(integrated_x_, other->integrated_x_);
  swap(integrated_y_, other->integrated_y_);
  swap(integrated_xgyro_, other->integrated_xgyro_);
  swap(integrated_ygyro_, other->integrated_ygyro_);
  swap(integrated_zgyro_, other->integrated_zgyro_);
  swap(temperature_, other->temperature_);
  swap(quality_, other->quality_);
  swap(time_delta_distance_us_, other->time_delta_distance_us_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpticalFlow::GetMetadata() const {
  protobuf_OpticalFlow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_OpticalFlow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensor_msgs::msgs::OpticalFlow* Arena::CreateMaybeMessage< ::sensor_msgs::msgs::OpticalFlow >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::msgs::OpticalFlow >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
