// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Groundtruth.proto

#ifndef PROTOBUF_INCLUDED_Groundtruth_2eproto
#define PROTOBUF_INCLUDED_Groundtruth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Groundtruth_2eproto 

namespace protobuf_Groundtruth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Groundtruth_2eproto
namespace sensor_msgs {
namespace msgs {
class Groundtruth;
class GroundtruthDefaultTypeInternal;
extern GroundtruthDefaultTypeInternal _Groundtruth_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> ::sensor_msgs::msgs::Groundtruth* Arena::CreateMaybeMessage<::sensor_msgs::msgs::Groundtruth>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class Groundtruth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Groundtruth) */ {
 public:
  Groundtruth();
  virtual ~Groundtruth();

  Groundtruth(const Groundtruth& from);

  inline Groundtruth& operator=(const Groundtruth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Groundtruth(Groundtruth&& from) noexcept
    : Groundtruth() {
    *this = ::std::move(from);
  }

  inline Groundtruth& operator=(Groundtruth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Groundtruth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Groundtruth* internal_default_instance() {
    return reinterpret_cast<const Groundtruth*>(
               &_Groundtruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Groundtruth* other);
  friend void swap(Groundtruth& a, Groundtruth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Groundtruth* New() const final {
    return CreateMaybeMessage<Groundtruth>(NULL);
  }

  Groundtruth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Groundtruth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Groundtruth& from);
  void MergeFrom(const Groundtruth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Groundtruth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // required double latitude_rad = 2;
  bool has_latitude_rad() const;
  void clear_latitude_rad();
  static const int kLatitudeRadFieldNumber = 2;
  double latitude_rad() const;
  void set_latitude_rad(double value);

  // required double longitude_rad = 3;
  bool has_longitude_rad() const;
  void clear_longitude_rad();
  static const int kLongitudeRadFieldNumber = 3;
  double longitude_rad() const;
  void set_longitude_rad(double value);

  // required double altitude = 4;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  double altitude() const;
  void set_altitude(double value);

  // optional double velocity_east = 5;
  bool has_velocity_east() const;
  void clear_velocity_east();
  static const int kVelocityEastFieldNumber = 5;
  double velocity_east() const;
  void set_velocity_east(double value);

  // optional double velocity_north = 6;
  bool has_velocity_north() const;
  void clear_velocity_north();
  static const int kVelocityNorthFieldNumber = 6;
  double velocity_north() const;
  void set_velocity_north(double value);

  // optional double velocity_up = 7;
  bool has_velocity_up() const;
  void clear_velocity_up();
  static const int kVelocityUpFieldNumber = 7;
  double velocity_up() const;
  void set_velocity_up(double value);

  // optional double attitude_q_w = 8;
  bool has_attitude_q_w() const;
  void clear_attitude_q_w();
  static const int kAttitudeQWFieldNumber = 8;
  double attitude_q_w() const;
  void set_attitude_q_w(double value);

  // optional double attitude_q_x = 9;
  bool has_attitude_q_x() const;
  void clear_attitude_q_x();
  static const int kAttitudeQXFieldNumber = 9;
  double attitude_q_x() const;
  void set_attitude_q_x(double value);

  // optional double attitude_q_y = 10;
  bool has_attitude_q_y() const;
  void clear_attitude_q_y();
  static const int kAttitudeQYFieldNumber = 10;
  double attitude_q_y() const;
  void set_attitude_q_y(double value);

  // optional double attitude_q_z = 11;
  bool has_attitude_q_z() const;
  void clear_attitude_q_z();
  static const int kAttitudeQZFieldNumber = 11;
  double attitude_q_z() const;
  void set_attitude_q_z(double value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Groundtruth)
 private:
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_latitude_rad();
  void clear_has_latitude_rad();
  void set_has_longitude_rad();
  void clear_has_longitude_rad();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_velocity_east();
  void clear_has_velocity_east();
  void set_has_velocity_north();
  void clear_has_velocity_north();
  void set_has_velocity_up();
  void clear_has_velocity_up();
  void set_has_attitude_q_w();
  void clear_has_attitude_q_w();
  void set_has_attitude_q_x();
  void clear_has_attitude_q_x();
  void set_has_attitude_q_y();
  void clear_has_attitude_q_y();
  void set_has_attitude_q_z();
  void clear_has_attitude_q_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 time_usec_;
  double latitude_rad_;
  double longitude_rad_;
  double altitude_;
  double velocity_east_;
  double velocity_north_;
  double velocity_up_;
  double attitude_q_w_;
  double attitude_q_x_;
  double attitude_q_y_;
  double attitude_q_z_;
  friend struct ::protobuf_Groundtruth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Groundtruth

// required int64 time_usec = 1;
inline bool Groundtruth::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Groundtruth::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Groundtruth::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Groundtruth::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Groundtruth::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.time_usec)
  return time_usec_;
}
inline void Groundtruth::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.time_usec)
}

// required double latitude_rad = 2;
inline bool Groundtruth::has_latitude_rad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Groundtruth::set_has_latitude_rad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Groundtruth::clear_has_latitude_rad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Groundtruth::clear_latitude_rad() {
  latitude_rad_ = 0;
  clear_has_latitude_rad();
}
inline double Groundtruth::latitude_rad() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.latitude_rad)
  return latitude_rad_;
}
inline void Groundtruth::set_latitude_rad(double value) {
  set_has_latitude_rad();
  latitude_rad_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.latitude_rad)
}

// required double longitude_rad = 3;
inline bool Groundtruth::has_longitude_rad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Groundtruth::set_has_longitude_rad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Groundtruth::clear_has_longitude_rad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Groundtruth::clear_longitude_rad() {
  longitude_rad_ = 0;
  clear_has_longitude_rad();
}
inline double Groundtruth::longitude_rad() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.longitude_rad)
  return longitude_rad_;
}
inline void Groundtruth::set_longitude_rad(double value) {
  set_has_longitude_rad();
  longitude_rad_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.longitude_rad)
}

// required double altitude = 4;
inline bool Groundtruth::has_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Groundtruth::set_has_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Groundtruth::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Groundtruth::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Groundtruth::altitude() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.altitude)
  return altitude_;
}
inline void Groundtruth::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.altitude)
}

// optional double velocity_east = 5;
inline bool Groundtruth::has_velocity_east() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Groundtruth::set_has_velocity_east() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Groundtruth::clear_has_velocity_east() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Groundtruth::clear_velocity_east() {
  velocity_east_ = 0;
  clear_has_velocity_east();
}
inline double Groundtruth::velocity_east() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.velocity_east)
  return velocity_east_;
}
inline void Groundtruth::set_velocity_east(double value) {
  set_has_velocity_east();
  velocity_east_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.velocity_east)
}

// optional double velocity_north = 6;
inline bool Groundtruth::has_velocity_north() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Groundtruth::set_has_velocity_north() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Groundtruth::clear_has_velocity_north() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Groundtruth::clear_velocity_north() {
  velocity_north_ = 0;
  clear_has_velocity_north();
}
inline double Groundtruth::velocity_north() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.velocity_north)
  return velocity_north_;
}
inline void Groundtruth::set_velocity_north(double value) {
  set_has_velocity_north();
  velocity_north_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.velocity_north)
}

// optional double velocity_up = 7;
inline bool Groundtruth::has_velocity_up() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Groundtruth::set_has_velocity_up() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Groundtruth::clear_has_velocity_up() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Groundtruth::clear_velocity_up() {
  velocity_up_ = 0;
  clear_has_velocity_up();
}
inline double Groundtruth::velocity_up() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.velocity_up)
  return velocity_up_;
}
inline void Groundtruth::set_velocity_up(double value) {
  set_has_velocity_up();
  velocity_up_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.velocity_up)
}

// optional double attitude_q_w = 8;
inline bool Groundtruth::has_attitude_q_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Groundtruth::set_has_attitude_q_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Groundtruth::clear_has_attitude_q_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Groundtruth::clear_attitude_q_w() {
  attitude_q_w_ = 0;
  clear_has_attitude_q_w();
}
inline double Groundtruth::attitude_q_w() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.attitude_q_w)
  return attitude_q_w_;
}
inline void Groundtruth::set_attitude_q_w(double value) {
  set_has_attitude_q_w();
  attitude_q_w_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.attitude_q_w)
}

// optional double attitude_q_x = 9;
inline bool Groundtruth::has_attitude_q_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Groundtruth::set_has_attitude_q_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Groundtruth::clear_has_attitude_q_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Groundtruth::clear_attitude_q_x() {
  attitude_q_x_ = 0;
  clear_has_attitude_q_x();
}
inline double Groundtruth::attitude_q_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.attitude_q_x)
  return attitude_q_x_;
}
inline void Groundtruth::set_attitude_q_x(double value) {
  set_has_attitude_q_x();
  attitude_q_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.attitude_q_x)
}

// optional double attitude_q_y = 10;
inline bool Groundtruth::has_attitude_q_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Groundtruth::set_has_attitude_q_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Groundtruth::clear_has_attitude_q_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Groundtruth::clear_attitude_q_y() {
  attitude_q_y_ = 0;
  clear_has_attitude_q_y();
}
inline double Groundtruth::attitude_q_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.attitude_q_y)
  return attitude_q_y_;
}
inline void Groundtruth::set_attitude_q_y(double value) {
  set_has_attitude_q_y();
  attitude_q_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.attitude_q_y)
}

// optional double attitude_q_z = 11;
inline bool Groundtruth::has_attitude_q_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Groundtruth::set_has_attitude_q_z() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Groundtruth::clear_has_attitude_q_z() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Groundtruth::clear_attitude_q_z() {
  attitude_q_z_ = 0;
  clear_has_attitude_q_z();
}
inline double Groundtruth::attitude_q_z() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Groundtruth.attitude_q_z)
  return attitude_q_z_;
}
inline void Groundtruth::set_attitude_q_z(double value) {
  set_has_attitude_q_z();
  attitude_q_z_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Groundtruth.attitude_q_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Groundtruth_2eproto
