// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pressure.proto

#ifndef PROTOBUF_INCLUDED_Pressure_2eproto
#define PROTOBUF_INCLUDED_Pressure_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Pressure_2eproto 

namespace protobuf_Pressure_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Pressure_2eproto
namespace sensor_msgs {
namespace msgs {
class Pressure;
class PressureDefaultTypeInternal;
extern PressureDefaultTypeInternal _Pressure_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> ::sensor_msgs::msgs::Pressure* Arena::CreateMaybeMessage<::sensor_msgs::msgs::Pressure>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class Pressure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Pressure) */ {
 public:
  Pressure();
  virtual ~Pressure();

  Pressure(const Pressure& from);

  inline Pressure& operator=(const Pressure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pressure(Pressure&& from) noexcept
    : Pressure() {
    *this = ::std::move(from);
  }

  inline Pressure& operator=(Pressure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pressure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pressure* internal_default_instance() {
    return reinterpret_cast<const Pressure*>(
               &_Pressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pressure* other);
  friend void swap(Pressure& a, Pressure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pressure* New() const final {
    return CreateMaybeMessage<Pressure>(NULL);
  }

  Pressure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pressure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pressure& from);
  void MergeFrom(const Pressure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pressure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // required float temperature = 2;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  float temperature() const;
  void set_temperature(float value);

  // required float absolute_pressure = 3;
  bool has_absolute_pressure() const;
  void clear_absolute_pressure();
  static const int kAbsolutePressureFieldNumber = 3;
  float absolute_pressure() const;
  void set_absolute_pressure(float value);

  // required float pressure_altitude = 4;
  bool has_pressure_altitude() const;
  void clear_pressure_altitude();
  static const int kPressureAltitudeFieldNumber = 4;
  float pressure_altitude() const;
  void set_pressure_altitude(float value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Pressure)
 private:
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_temperature();
  void clear_has_temperature();
  void set_has_absolute_pressure();
  void clear_has_absolute_pressure();
  void set_has_pressure_altitude();
  void clear_has_pressure_altitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 time_usec_;
  float temperature_;
  float absolute_pressure_;
  float pressure_altitude_;
  friend struct ::protobuf_Pressure_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pressure

// required int64 time_usec = 1;
inline bool Pressure::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pressure::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pressure::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pressure::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Pressure::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.time_usec)
  return time_usec_;
}
inline void Pressure::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.time_usec)
}

// required float temperature = 2;
inline bool Pressure::has_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pressure::set_has_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pressure::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pressure::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline float Pressure::temperature() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.temperature)
  return temperature_;
}
inline void Pressure::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.temperature)
}

// required float absolute_pressure = 3;
inline bool Pressure::has_absolute_pressure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pressure::set_has_absolute_pressure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pressure::clear_has_absolute_pressure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pressure::clear_absolute_pressure() {
  absolute_pressure_ = 0;
  clear_has_absolute_pressure();
}
inline float Pressure::absolute_pressure() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.absolute_pressure)
  return absolute_pressure_;
}
inline void Pressure::set_absolute_pressure(float value) {
  set_has_absolute_pressure();
  absolute_pressure_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.absolute_pressure)
}

// required float pressure_altitude = 4;
inline bool Pressure::has_pressure_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pressure::set_has_pressure_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pressure::clear_has_pressure_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pressure::clear_pressure_altitude() {
  pressure_altitude_ = 0;
  clear_has_pressure_altitude();
}
inline float Pressure::pressure_altitude() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.pressure_altitude)
  return pressure_altitude_;
}
inline void Pressure::set_pressure_altitude(float value) {
  set_has_pressure_altitude();
  pressure_altitude_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.pressure_altitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Pressure_2eproto
