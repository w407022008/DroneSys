// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IRLock.proto

#ifndef PROTOBUF_INCLUDED_IRLock_2eproto
#define PROTOBUF_INCLUDED_IRLock_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_IRLock_2eproto 

namespace protobuf_IRLock_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_IRLock_2eproto
namespace sensor_msgs {
namespace msgs {
class IRLock;
class IRLockDefaultTypeInternal;
extern IRLockDefaultTypeInternal _IRLock_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> ::sensor_msgs::msgs::IRLock* Arena::CreateMaybeMessage<::sensor_msgs::msgs::IRLock>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class IRLock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.IRLock) */ {
 public:
  IRLock();
  virtual ~IRLock();

  IRLock(const IRLock& from);

  inline IRLock& operator=(const IRLock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IRLock(IRLock&& from) noexcept
    : IRLock() {
    *this = ::std::move(from);
  }

  inline IRLock& operator=(IRLock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IRLock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IRLock* internal_default_instance() {
    return reinterpret_cast<const IRLock*>(
               &_IRLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IRLock* other);
  friend void swap(IRLock& a, IRLock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IRLock* New() const final {
    return CreateMaybeMessage<IRLock>(NULL);
  }

  IRLock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IRLock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IRLock& from);
  void MergeFrom(const IRLock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRLock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // required int32 signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  ::google::protobuf::int32 signature() const;
  void set_signature(::google::protobuf::int32 value);

  // required float pos_x = 3;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 3;
  float pos_x() const;
  void set_pos_x(float value);

  // required float pos_y = 4;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 4;
  float pos_y() const;
  void set_pos_y(float value);

  // required float size_x = 5;
  bool has_size_x() const;
  void clear_size_x();
  static const int kSizeXFieldNumber = 5;
  float size_x() const;
  void set_size_x(float value);

  // optional double q_w = 7;
  bool has_q_w() const;
  void clear_q_w();
  static const int kQWFieldNumber = 7;
  double q_w() const;
  void set_q_w(double value);

  // optional double q_x = 8;
  bool has_q_x() const;
  void clear_q_x();
  static const int kQXFieldNumber = 8;
  double q_x() const;
  void set_q_x(double value);

  // optional double q_y = 9;
  bool has_q_y() const;
  void clear_q_y();
  static const int kQYFieldNumber = 9;
  double q_y() const;
  void set_q_y(double value);

  // optional double q_z = 10;
  bool has_q_z() const;
  void clear_q_z();
  static const int kQZFieldNumber = 10;
  double q_z() const;
  void set_q_z(double value);

  // optional double attitude_q_w = 11;
  bool has_attitude_q_w() const;
  void clear_attitude_q_w();
  static const int kAttitudeQWFieldNumber = 11;
  double attitude_q_w() const;
  void set_attitude_q_w(double value);

  // optional double attitude_q_x = 12;
  bool has_attitude_q_x() const;
  void clear_attitude_q_x();
  static const int kAttitudeQXFieldNumber = 12;
  double attitude_q_x() const;
  void set_attitude_q_x(double value);

  // optional double attitude_q_y = 13;
  bool has_attitude_q_y() const;
  void clear_attitude_q_y();
  static const int kAttitudeQYFieldNumber = 13;
  double attitude_q_y() const;
  void set_attitude_q_y(double value);

  // optional double attitude_q_z = 14;
  bool has_attitude_q_z() const;
  void clear_attitude_q_z();
  static const int kAttitudeQZFieldNumber = 14;
  double attitude_q_z() const;
  void set_attitude_q_z(double value);

  // required float size_y = 6;
  bool has_size_y() const;
  void clear_size_y();
  static const int kSizeYFieldNumber = 6;
  float size_y() const;
  void set_size_y(float value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.IRLock)
 private:
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_signature();
  void clear_has_signature();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_size_x();
  void clear_has_size_x();
  void set_has_size_y();
  void clear_has_size_y();
  void set_has_q_w();
  void clear_has_q_w();
  void set_has_q_x();
  void clear_has_q_x();
  void set_has_q_y();
  void clear_has_q_y();
  void set_has_q_z();
  void clear_has_q_z();
  void set_has_attitude_q_w();
  void clear_has_attitude_q_w();
  void set_has_attitude_q_x();
  void clear_has_attitude_q_x();
  void set_has_attitude_q_y();
  void clear_has_attitude_q_y();
  void set_has_attitude_q_z();
  void clear_has_attitude_q_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 time_usec_;
  ::google::protobuf::int32 signature_;
  float pos_x_;
  float pos_y_;
  float size_x_;
  double q_w_;
  double q_x_;
  double q_y_;
  double q_z_;
  double attitude_q_w_;
  double attitude_q_x_;
  double attitude_q_y_;
  double attitude_q_z_;
  float size_y_;
  friend struct ::protobuf_IRLock_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IRLock

// required int64 time_usec = 1;
inline bool IRLock::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IRLock::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IRLock::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IRLock::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 IRLock::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.time_usec)
  return time_usec_;
}
inline void IRLock::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.time_usec)
}

// required int32 signature = 2;
inline bool IRLock::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IRLock::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IRLock::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IRLock::clear_signature() {
  signature_ = 0;
  clear_has_signature();
}
inline ::google::protobuf::int32 IRLock::signature() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.signature)
  return signature_;
}
inline void IRLock::set_signature(::google::protobuf::int32 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.signature)
}

// required float pos_x = 3;
inline bool IRLock::has_pos_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IRLock::set_has_pos_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IRLock::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IRLock::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline float IRLock::pos_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.pos_x)
  return pos_x_;
}
inline void IRLock::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.pos_x)
}

// required float pos_y = 4;
inline bool IRLock::has_pos_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IRLock::set_has_pos_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IRLock::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IRLock::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline float IRLock::pos_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.pos_y)
  return pos_y_;
}
inline void IRLock::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.pos_y)
}

// required float size_x = 5;
inline bool IRLock::has_size_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IRLock::set_has_size_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IRLock::clear_has_size_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IRLock::clear_size_x() {
  size_x_ = 0;
  clear_has_size_x();
}
inline float IRLock::size_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.size_x)
  return size_x_;
}
inline void IRLock::set_size_x(float value) {
  set_has_size_x();
  size_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.size_x)
}

// required float size_y = 6;
inline bool IRLock::has_size_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IRLock::set_has_size_y() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IRLock::clear_has_size_y() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IRLock::clear_size_y() {
  size_y_ = 0;
  clear_has_size_y();
}
inline float IRLock::size_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.size_y)
  return size_y_;
}
inline void IRLock::set_size_y(float value) {
  set_has_size_y();
  size_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.size_y)
}

// optional double q_w = 7;
inline bool IRLock::has_q_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IRLock::set_has_q_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IRLock::clear_has_q_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IRLock::clear_q_w() {
  q_w_ = 0;
  clear_has_q_w();
}
inline double IRLock::q_w() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.q_w)
  return q_w_;
}
inline void IRLock::set_q_w(double value) {
  set_has_q_w();
  q_w_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.q_w)
}

// optional double q_x = 8;
inline bool IRLock::has_q_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IRLock::set_has_q_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IRLock::clear_has_q_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IRLock::clear_q_x() {
  q_x_ = 0;
  clear_has_q_x();
}
inline double IRLock::q_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.q_x)
  return q_x_;
}
inline void IRLock::set_q_x(double value) {
  set_has_q_x();
  q_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.q_x)
}

// optional double q_y = 9;
inline bool IRLock::has_q_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IRLock::set_has_q_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IRLock::clear_has_q_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IRLock::clear_q_y() {
  q_y_ = 0;
  clear_has_q_y();
}
inline double IRLock::q_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.q_y)
  return q_y_;
}
inline void IRLock::set_q_y(double value) {
  set_has_q_y();
  q_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.q_y)
}

// optional double q_z = 10;
inline bool IRLock::has_q_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IRLock::set_has_q_z() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IRLock::clear_has_q_z() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IRLock::clear_q_z() {
  q_z_ = 0;
  clear_has_q_z();
}
inline double IRLock::q_z() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.q_z)
  return q_z_;
}
inline void IRLock::set_q_z(double value) {
  set_has_q_z();
  q_z_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.q_z)
}

// optional double attitude_q_w = 11;
inline bool IRLock::has_attitude_q_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IRLock::set_has_attitude_q_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IRLock::clear_has_attitude_q_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IRLock::clear_attitude_q_w() {
  attitude_q_w_ = 0;
  clear_has_attitude_q_w();
}
inline double IRLock::attitude_q_w() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.attitude_q_w)
  return attitude_q_w_;
}
inline void IRLock::set_attitude_q_w(double value) {
  set_has_attitude_q_w();
  attitude_q_w_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.attitude_q_w)
}

// optional double attitude_q_x = 12;
inline bool IRLock::has_attitude_q_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IRLock::set_has_attitude_q_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IRLock::clear_has_attitude_q_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IRLock::clear_attitude_q_x() {
  attitude_q_x_ = 0;
  clear_has_attitude_q_x();
}
inline double IRLock::attitude_q_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.attitude_q_x)
  return attitude_q_x_;
}
inline void IRLock::set_attitude_q_x(double value) {
  set_has_attitude_q_x();
  attitude_q_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.attitude_q_x)
}

// optional double attitude_q_y = 13;
inline bool IRLock::has_attitude_q_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IRLock::set_has_attitude_q_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IRLock::clear_has_attitude_q_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IRLock::clear_attitude_q_y() {
  attitude_q_y_ = 0;
  clear_has_attitude_q_y();
}
inline double IRLock::attitude_q_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.attitude_q_y)
  return attitude_q_y_;
}
inline void IRLock::set_attitude_q_y(double value) {
  set_has_attitude_q_y();
  attitude_q_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.attitude_q_y)
}

// optional double attitude_q_z = 14;
inline bool IRLock::has_attitude_q_z() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IRLock::set_has_attitude_q_z() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IRLock::clear_has_attitude_q_z() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IRLock::clear_attitude_q_z() {
  attitude_q_z_ = 0;
  clear_has_attitude_q_z();
}
inline double IRLock::attitude_q_z() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.attitude_q_z)
  return attitude_q_z_;
}
inline void IRLock::set_attitude_q_z(double value) {
  set_has_attitude_q_z();
  attitude_q_z_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.attitude_q_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_IRLock_2eproto
