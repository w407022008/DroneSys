// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Range.proto

#ifndef PROTOBUF_INCLUDED_Range_2eproto
#define PROTOBUF_INCLUDED_Range_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "quaternion.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Range_2eproto 

namespace protobuf_Range_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Range_2eproto
namespace sensor_msgs {
namespace msgs {
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> ::sensor_msgs::msgs::Range* Arena::CreateMaybeMessage<::sensor_msgs::msgs::Range>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(NULL);
  }

  Range* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gazebo.msgs.Quaternion orientation = 7;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 7;
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  public:
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // required float min_distance = 2;
  bool has_min_distance() const;
  void clear_min_distance();
  static const int kMinDistanceFieldNumber = 2;
  float min_distance() const;
  void set_min_distance(float value);

  // required float max_distance = 3;
  bool has_max_distance() const;
  void clear_max_distance();
  static const int kMaxDistanceFieldNumber = 3;
  float max_distance() const;
  void set_max_distance(float value);

  // required float current_distance = 4;
  bool has_current_distance() const;
  void clear_current_distance();
  static const int kCurrentDistanceFieldNumber = 4;
  float current_distance() const;
  void set_current_distance(float value);

  // optional float h_fov = 5;
  bool has_h_fov() const;
  void clear_h_fov();
  static const int kHFovFieldNumber = 5;
  float h_fov() const;
  void set_h_fov(float value);

  // optional float v_fov = 6;
  bool has_v_fov() const;
  void clear_v_fov();
  static const int kVFovFieldNumber = 6;
  float v_fov() const;
  void set_v_fov(float value);

  // optional int32 signal_quality = 8;
  bool has_signal_quality() const;
  void clear_signal_quality();
  static const int kSignalQualityFieldNumber = 8;
  ::google::protobuf::int32 signal_quality() const;
  void set_signal_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Range)
 private:
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_min_distance();
  void clear_has_min_distance();
  void set_has_max_distance();
  void clear_has_max_distance();
  void set_has_current_distance();
  void clear_has_current_distance();
  void set_has_h_fov();
  void clear_has_h_fov();
  void set_has_v_fov();
  void clear_has_v_fov();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_signal_quality();
  void clear_has_signal_quality();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::google::protobuf::int64 time_usec_;
  float min_distance_;
  float max_distance_;
  float current_distance_;
  float h_fov_;
  float v_fov_;
  ::google::protobuf::int32 signal_quality_;
  friend struct ::protobuf_Range_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Range

// required int64 time_usec = 1;
inline bool Range::has_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Range::set_has_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Range::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Range::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Range::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.time_usec)
  return time_usec_;
}
inline void Range::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.time_usec)
}

// required float min_distance = 2;
inline bool Range::has_min_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Range::set_has_min_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Range::clear_has_min_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Range::clear_min_distance() {
  min_distance_ = 0;
  clear_has_min_distance();
}
inline float Range::min_distance() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.min_distance)
  return min_distance_;
}
inline void Range::set_min_distance(float value) {
  set_has_min_distance();
  min_distance_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.min_distance)
}

// required float max_distance = 3;
inline bool Range::has_max_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Range::set_has_max_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Range::clear_has_max_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Range::clear_max_distance() {
  max_distance_ = 0;
  clear_has_max_distance();
}
inline float Range::max_distance() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.max_distance)
  return max_distance_;
}
inline void Range::set_max_distance(float value) {
  set_has_max_distance();
  max_distance_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.max_distance)
}

// required float current_distance = 4;
inline bool Range::has_current_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Range::set_has_current_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Range::clear_has_current_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Range::clear_current_distance() {
  current_distance_ = 0;
  clear_has_current_distance();
}
inline float Range::current_distance() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.current_distance)
  return current_distance_;
}
inline void Range::set_current_distance(float value) {
  set_has_current_distance();
  current_distance_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.current_distance)
}

// optional float h_fov = 5;
inline bool Range::has_h_fov() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Range::set_has_h_fov() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Range::clear_has_h_fov() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Range::clear_h_fov() {
  h_fov_ = 0;
  clear_has_h_fov();
}
inline float Range::h_fov() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.h_fov)
  return h_fov_;
}
inline void Range::set_h_fov(float value) {
  set_has_h_fov();
  h_fov_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.h_fov)
}

// optional float v_fov = 6;
inline bool Range::has_v_fov() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Range::set_has_v_fov() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Range::clear_has_v_fov() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Range::clear_v_fov() {
  v_fov_ = 0;
  clear_has_v_fov();
}
inline float Range::v_fov() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.v_fov)
  return v_fov_;
}
inline void Range::set_v_fov(float value) {
  set_has_v_fov();
  v_fov_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.v_fov)
}

// optional .gazebo.msgs.Quaternion orientation = 7;
inline bool Range::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Quaternion& Range::_internal_orientation() const {
  return *orientation_;
}
inline const ::gazebo::msgs::Quaternion& Range::orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline ::gazebo::msgs::Quaternion* Range::release_orientation() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Range.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Quaternion* Range::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Range.orientation)
  return orientation_;
}
inline void Range::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Range.orientation)
}

// optional int32 signal_quality = 8;
inline bool Range::has_signal_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Range::set_has_signal_quality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Range::clear_has_signal_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Range::clear_signal_quality() {
  signal_quality_ = 0;
  clear_has_signal_quality();
}
inline ::google::protobuf::int32 Range::signal_quality() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Range.signal_quality)
  return signal_quality_;
}
inline void Range::set_signal_quality(::google::protobuf::int32 value) {
  set_has_signal_quality();
  signal_quality_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Range.signal_quality)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Range_2eproto
