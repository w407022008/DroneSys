// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wind.proto

#ifndef PROTOBUF_INCLUDED_Wind_2eproto
#define PROTOBUF_INCLUDED_Wind_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Wind_2eproto 

namespace protobuf_Wind_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Wind_2eproto
namespace physics_msgs {
namespace msgs {
class Wind;
class WindDefaultTypeInternal;
extern WindDefaultTypeInternal _Wind_default_instance_;
}  // namespace msgs
}  // namespace physics_msgs
namespace google {
namespace protobuf {
template<> ::physics_msgs::msgs::Wind* Arena::CreateMaybeMessage<::physics_msgs::msgs::Wind>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace physics_msgs {
namespace msgs {

// ===================================================================

class Wind : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:physics_msgs.msgs.Wind) */ {
 public:
  Wind();
  virtual ~Wind();

  Wind(const Wind& from);

  inline Wind& operator=(const Wind& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Wind(Wind&& from) noexcept
    : Wind() {
    *this = ::std::move(from);
  }

  inline Wind& operator=(Wind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wind* internal_default_instance() {
    return reinterpret_cast<const Wind*>(
               &_Wind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Wind* other);
  friend void swap(Wind& a, Wind& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Wind* New() const final {
    return CreateMaybeMessage<Wind>(NULL);
  }

  Wind* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Wind>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Wind& from);
  void MergeFrom(const Wind& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string frame_id = 1;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // required .gazebo.msgs.Vector3d velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  private:
  const ::gazebo::msgs::Vector3d& _internal_velocity() const;
  public:
  const ::gazebo::msgs::Vector3d& velocity() const;
  ::gazebo::msgs::Vector3d* release_velocity();
  ::gazebo::msgs::Vector3d* mutable_velocity();
  void set_allocated_velocity(::gazebo::msgs::Vector3d* velocity);

  // required int64 time_usec = 2;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 2;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:physics_msgs.msgs.Wind)
 private:
  void set_has_frame_id();
  void clear_has_frame_id();
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_velocity();
  void clear_has_velocity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::gazebo::msgs::Vector3d* velocity_;
  ::google::protobuf::int64 time_usec_;
  friend struct ::protobuf_Wind_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Wind

// required string frame_id = 1;
inline bool Wind::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wind::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wind::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wind::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& Wind::frame_id() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.frame_id)
  return frame_id_.GetNoArena();
}
inline void Wind::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:physics_msgs.msgs.Wind.frame_id)
}
#if LANG_CXX11
inline void Wind::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:physics_msgs.msgs.Wind.frame_id)
}
#endif
inline void Wind::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:physics_msgs.msgs.Wind.frame_id)
}
inline void Wind::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:physics_msgs.msgs.Wind.frame_id)
}
inline ::std::string* Wind::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:physics_msgs.msgs.Wind.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wind::release_frame_id() {
  // @@protoc_insertion_point(field_release:physics_msgs.msgs.Wind.frame_id)
  if (!has_frame_id()) {
    return NULL;
  }
  clear_has_frame_id();
  return frame_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wind::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:physics_msgs.msgs.Wind.frame_id)
}

// required int64 time_usec = 2;
inline bool Wind::has_time_usec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wind::set_has_time_usec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wind::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wind::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Wind::time_usec() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.time_usec)
  return time_usec_;
}
inline void Wind::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:physics_msgs.msgs.Wind.time_usec)
}

// required .gazebo.msgs.Vector3d velocity = 3;
inline bool Wind::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wind::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wind::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector3d& Wind::_internal_velocity() const {
  return *velocity_;
}
inline const ::gazebo::msgs::Vector3d& Wind::velocity() const {
  const ::gazebo::msgs::Vector3d* p = velocity_;
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Wind::release_velocity() {
  // @@protoc_insertion_point(field_release:physics_msgs.msgs.Wind.velocity)
  clear_has_velocity();
  ::gazebo::msgs::Vector3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Wind::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:physics_msgs.msgs.Wind.velocity)
  return velocity_;
}
inline void Wind::set_allocated_velocity(::gazebo::msgs::Vector3d* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:physics_msgs.msgs.Wind.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace physics_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Wind_2eproto
