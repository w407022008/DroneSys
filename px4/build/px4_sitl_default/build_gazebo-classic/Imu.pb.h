// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Imu.proto

#ifndef PROTOBUF_INCLUDED_Imu_2eproto
#define PROTOBUF_INCLUDED_Imu_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "quaternion.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Imu_2eproto 

namespace protobuf_Imu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Imu_2eproto
namespace sensor_msgs {
namespace msgs {
class Imu;
class ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> ::sensor_msgs::msgs::Imu* Arena::CreateMaybeMessage<::sensor_msgs::msgs::Imu>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class Imu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Imu) */ {
 public:
  Imu();
  virtual ~Imu();

  Imu(const Imu& from);

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(Imu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Imu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Imu* other);
  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Imu* New() const final {
    return CreateMaybeMessage<Imu>(NULL);
  }

  Imu* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Imu>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Imu& from);
  void MergeFrom(const Imu& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Imu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float orientation_covariance = 2 [packed = true];
  int orientation_covariance_size() const;
  void clear_orientation_covariance();
  static const int kOrientationCovarianceFieldNumber = 2;
  float orientation_covariance(int index) const;
  void set_orientation_covariance(int index, float value);
  void add_orientation_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      orientation_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_orientation_covariance();

  // repeated float angular_velocity_covariance = 4 [packed = true];
  int angular_velocity_covariance_size() const;
  void clear_angular_velocity_covariance();
  static const int kAngularVelocityCovarianceFieldNumber = 4;
  float angular_velocity_covariance(int index) const;
  void set_angular_velocity_covariance(int index, float value);
  void add_angular_velocity_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      angular_velocity_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_angular_velocity_covariance();

  // repeated float linear_acceleration_covariance = 6 [packed = true];
  int linear_acceleration_covariance_size() const;
  void clear_linear_acceleration_covariance();
  static const int kLinearAccelerationCovarianceFieldNumber = 6;
  float linear_acceleration_covariance(int index) const;
  void set_linear_acceleration_covariance(int index, float value);
  void add_linear_acceleration_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      linear_acceleration_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_linear_acceleration_covariance();

  // required .gazebo.msgs.Quaternion orientation = 1;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 1;
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  public:
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required .gazebo.msgs.Vector3d angular_velocity = 3;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 3;
  private:
  const ::gazebo::msgs::Vector3d& _internal_angular_velocity() const;
  public:
  const ::gazebo::msgs::Vector3d& angular_velocity() const;
  ::gazebo::msgs::Vector3d* release_angular_velocity();
  ::gazebo::msgs::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity);

  // required .gazebo.msgs.Vector3d linear_acceleration = 5;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 5;
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_acceleration() const;
  public:
  const ::gazebo::msgs::Vector3d& linear_acceleration() const;
  ::gazebo::msgs::Vector3d* release_linear_acceleration();
  ::gazebo::msgs::Vector3d* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::gazebo::msgs::Vector3d* linear_acceleration);

  // required int64 time_usec = 7;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 7;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // required int64 seq = 8;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 8;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Imu)
 private:
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_angular_velocity();
  void clear_has_angular_velocity();
  void set_has_linear_acceleration();
  void clear_has_linear_acceleration();
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_seq();
  void clear_has_seq();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > orientation_covariance_;
  mutable int _orientation_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > angular_velocity_covariance_;
  mutable int _angular_velocity_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > linear_acceleration_covariance_;
  mutable int _linear_acceleration_covariance_cached_byte_size_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* angular_velocity_;
  ::gazebo::msgs::Vector3d* linear_acceleration_;
  ::google::protobuf::int64 time_usec_;
  ::google::protobuf::int64 seq_;
  friend struct ::protobuf_Imu_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Imu

// required .gazebo.msgs.Quaternion orientation = 1;
inline bool Imu::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Imu::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Imu::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Quaternion& Imu::_internal_orientation() const {
  return *orientation_;
}
inline const ::gazebo::msgs::Quaternion& Imu::orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline ::gazebo::msgs::Quaternion* Imu::release_orientation() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Imu.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Quaternion* Imu::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Imu.orientation)
  return orientation_;
}
inline void Imu::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Imu.orientation)
}

// repeated float orientation_covariance = 2 [packed = true];
inline int Imu::orientation_covariance_size() const {
  return orientation_covariance_.size();
}
inline void Imu::clear_orientation_covariance() {
  orientation_covariance_.Clear();
}
inline float Imu::orientation_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.orientation_covariance)
  return orientation_covariance_.Get(index);
}
inline void Imu::set_orientation_covariance(int index, float value) {
  orientation_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.orientation_covariance)
}
inline void Imu::add_orientation_covariance(float value) {
  orientation_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.msgs.Imu.orientation_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Imu::orientation_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.msgs.Imu.orientation_covariance)
  return orientation_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Imu::mutable_orientation_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.msgs.Imu.orientation_covariance)
  return &orientation_covariance_;
}

// required .gazebo.msgs.Vector3d angular_velocity = 3;
inline bool Imu::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Imu::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Imu::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector3d& Imu::_internal_angular_velocity() const {
  return *angular_velocity_;
}
inline const ::gazebo::msgs::Vector3d& Imu::angular_velocity() const {
  const ::gazebo::msgs::Vector3d* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Imu::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Imu.angular_velocity)
  clear_has_angular_velocity();
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Imu::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Imu.angular_velocity)
  return angular_velocity_;
}
inline void Imu::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Imu.angular_velocity)
}

// repeated float angular_velocity_covariance = 4 [packed = true];
inline int Imu::angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
inline void Imu::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
inline float Imu::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.angular_velocity_covariance)
  return angular_velocity_covariance_.Get(index);
}
inline void Imu::set_angular_velocity_covariance(int index, float value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.angular_velocity_covariance)
}
inline void Imu::add_angular_velocity_covariance(float value) {
  angular_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.msgs.Imu.angular_velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Imu::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.msgs.Imu.angular_velocity_covariance)
  return angular_velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Imu::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.msgs.Imu.angular_velocity_covariance)
  return &angular_velocity_covariance_;
}

// required .gazebo.msgs.Vector3d linear_acceleration = 5;
inline bool Imu::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Imu::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Imu::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::gazebo::msgs::Vector3d& Imu::_internal_linear_acceleration() const {
  return *linear_acceleration_;
}
inline const ::gazebo::msgs::Vector3d& Imu::linear_acceleration() const {
  const ::gazebo::msgs::Vector3d* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Imu::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Imu.linear_acceleration)
  clear_has_linear_acceleration();
  ::gazebo::msgs::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Imu::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Imu.linear_acceleration)
  return linear_acceleration_;
}
inline void Imu::set_allocated_linear_acceleration(::gazebo::msgs::Vector3d* linear_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Imu.linear_acceleration)
}

// repeated float linear_acceleration_covariance = 6 [packed = true];
inline int Imu::linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
inline void Imu::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
inline float Imu::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Get(index);
}
inline void Imu::set_linear_acceleration_covariance(int index, float value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
}
inline void Imu::add_linear_acceleration_covariance(float value) {
  linear_acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Imu::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
  return linear_acceleration_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Imu::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
  return &linear_acceleration_covariance_;
}

// required int64 time_usec = 7;
inline bool Imu::has_time_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Imu::set_has_time_usec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Imu::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Imu::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Imu::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.time_usec)
  return time_usec_;
}
inline void Imu::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.time_usec)
}

// required int64 seq = 8;
inline bool Imu::has_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Imu::set_has_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Imu::clear_has_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Imu::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
  clear_has_seq();
}
inline ::google::protobuf::int64 Imu::seq() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.seq)
  return seq_;
}
inline void Imu::set_seq(::google::protobuf::int64 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.seq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Imu_2eproto
