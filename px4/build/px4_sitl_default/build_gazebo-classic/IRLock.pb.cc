// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IRLock.proto

#include "IRLock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {
class IRLockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IRLock>
      _instance;
} _IRLock_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
namespace protobuf_IRLock_2eproto {
static void InitDefaultsIRLock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::msgs::_IRLock_default_instance_;
    new (ptr) ::sensor_msgs::msgs::IRLock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::msgs::IRLock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IRLock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIRLock}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_IRLock.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, time_usec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, size_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, size_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, q_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, q_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, q_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, q_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, attitude_q_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, attitude_q_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, attitude_q_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_msgs::msgs::IRLock, attitude_q_z_),
  0,
  1,
  2,
  3,
  4,
  13,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::sensor_msgs::msgs::IRLock)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_msgs::msgs::_IRLock_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "IRLock.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014IRLock.proto\022\020sensor_msgs.msgs\"\370\001\n\006IRL"
      "ock\022\021\n\ttime_usec\030\001 \002(\003\022\021\n\tsignature\030\002 \002("
      "\005\022\r\n\005pos_x\030\003 \002(\002\022\r\n\005pos_y\030\004 \002(\002\022\016\n\006size_"
      "x\030\005 \002(\002\022\016\n\006size_y\030\006 \002(\002\022\013\n\003q_w\030\007 \001(\001\022\013\n\003"
      "q_x\030\010 \001(\001\022\013\n\003q_y\030\t \001(\001\022\013\n\003q_z\030\n \001(\001\022\024\n\014a"
      "ttitude_q_w\030\013 \001(\001\022\024\n\014attitude_q_x\030\014 \001(\001\022"
      "\024\n\014attitude_q_y\030\r \001(\001\022\024\n\014attitude_q_z\030\016 "
      "\001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IRLock.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_IRLock_2eproto
namespace sensor_msgs {
namespace msgs {

// ===================================================================

void IRLock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IRLock::kTimeUsecFieldNumber;
const int IRLock::kSignatureFieldNumber;
const int IRLock::kPosXFieldNumber;
const int IRLock::kPosYFieldNumber;
const int IRLock::kSizeXFieldNumber;
const int IRLock::kSizeYFieldNumber;
const int IRLock::kQWFieldNumber;
const int IRLock::kQXFieldNumber;
const int IRLock::kQYFieldNumber;
const int IRLock::kQZFieldNumber;
const int IRLock::kAttitudeQWFieldNumber;
const int IRLock::kAttitudeQXFieldNumber;
const int IRLock::kAttitudeQYFieldNumber;
const int IRLock::kAttitudeQZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IRLock::IRLock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_IRLock_2eproto::scc_info_IRLock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.IRLock)
}
IRLock::IRLock(const IRLock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_y_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(size_y_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.IRLock)
}

void IRLock::SharedCtor() {
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_y_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(size_y_));
}

IRLock::~IRLock() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.IRLock)
  SharedDtor();
}

void IRLock::SharedDtor() {
}

void IRLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IRLock::descriptor() {
  ::protobuf_IRLock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IRLock_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IRLock& IRLock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_IRLock_2eproto::scc_info_IRLock.base);
  return *internal_default_instance();
}


void IRLock::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.IRLock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&q_y_) -
        reinterpret_cast<char*>(&time_usec_)) + sizeof(q_y_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&q_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_y_) -
        reinterpret_cast<char*>(&q_z_)) + sizeof(size_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IRLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.IRLock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pos_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float size_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_size_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float size_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_size_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double q_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_q_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double q_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_q_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double q_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_q_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double q_z = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_q_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double attitude_q_w = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_attitude_q_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double attitude_q_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_attitude_q_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double attitude_q_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_attitude_q_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double attitude_q_z = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_attitude_q_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.IRLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.IRLock)
  return false;
#undef DO_
}

void IRLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.IRLock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required int32 signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signature(), output);
  }

  // required float pos_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_x(), output);
  }

  // required float pos_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_y(), output);
  }

  // required float size_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->size_x(), output);
  }

  // required float size_y = 6;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->size_y(), output);
  }

  // optional double q_w = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->q_w(), output);
  }

  // optional double q_x = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->q_x(), output);
  }

  // optional double q_y = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->q_y(), output);
  }

  // optional double q_z = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->q_z(), output);
  }

  // optional double attitude_q_w = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->attitude_q_w(), output);
  }

  // optional double attitude_q_x = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->attitude_q_x(), output);
  }

  // optional double attitude_q_y = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->attitude_q_y(), output);
  }

  // optional double attitude_q_z = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->attitude_q_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.IRLock)
}

::google::protobuf::uint8* IRLock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.IRLock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required int32 signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signature(), target);
  }

  // required float pos_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_x(), target);
  }

  // required float pos_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_y(), target);
  }

  // required float size_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->size_x(), target);
  }

  // required float size_y = 6;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->size_y(), target);
  }

  // optional double q_w = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->q_w(), target);
  }

  // optional double q_x = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->q_x(), target);
  }

  // optional double q_y = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->q_y(), target);
  }

  // optional double q_z = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->q_z(), target);
  }

  // optional double attitude_q_w = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->attitude_q_w(), target);
  }

  // optional double attitude_q_x = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->attitude_q_x(), target);
  }

  // optional double attitude_q_y = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->attitude_q_y(), target);
  }

  // optional double attitude_q_z = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->attitude_q_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.IRLock)
  return target;
}

size_t IRLock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.IRLock)
  size_t total_size = 0;

  if (has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  if (has_signature()) {
    // required int32 signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signature());
  }

  if (has_pos_x()) {
    // required float pos_x = 3;
    total_size += 1 + 4;
  }

  if (has_pos_y()) {
    // required float pos_y = 4;
    total_size += 1 + 4;
  }

  if (has_size_x()) {
    // required float size_x = 5;
    total_size += 1 + 4;
  }

  if (has_size_y()) {
    // required float size_y = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t IRLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.IRLock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000201f) ^ 0x0000201f) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

    // required int32 signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signature());

    // required float pos_x = 3;
    total_size += 1 + 4;

    // required float pos_y = 4;
    total_size += 1 + 4;

    // required float size_x = 5;
    total_size += 1 + 4;

    // required float size_y = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional double q_w = 7;
    if (has_q_w()) {
      total_size += 1 + 8;
    }

    // optional double q_x = 8;
    if (has_q_x()) {
      total_size += 1 + 8;
    }

    // optional double q_y = 9;
    if (has_q_y()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double q_z = 10;
    if (has_q_z()) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_w = 11;
    if (has_attitude_q_w()) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_x = 12;
    if (has_attitude_q_x()) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_y = 13;
    if (has_attitude_q_y()) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_z = 14;
    if (has_attitude_q_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRLock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.IRLock)
  GOOGLE_DCHECK_NE(&from, this);
  const IRLock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IRLock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.IRLock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.IRLock)
    MergeFrom(*source);
  }
}

void IRLock::MergeFrom(const IRLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.IRLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_usec_ = from.time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_x_ = from.size_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      q_w_ = from.q_w_;
    }
    if (cached_has_bits & 0x00000040u) {
      q_x_ = from.q_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      q_y_ = from.q_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      q_z_ = from.q_z_;
    }
    if (cached_has_bits & 0x00000200u) {
      attitude_q_w_ = from.attitude_q_w_;
    }
    if (cached_has_bits & 0x00000400u) {
      attitude_q_x_ = from.attitude_q_x_;
    }
    if (cached_has_bits & 0x00000800u) {
      attitude_q_y_ = from.attitude_q_y_;
    }
    if (cached_has_bits & 0x00001000u) {
      attitude_q_z_ = from.attitude_q_z_;
    }
    if (cached_has_bits & 0x00002000u) {
      size_y_ = from.size_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IRLock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.IRLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRLock::CopyFrom(const IRLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.IRLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000201f) != 0x0000201f) return false;
  return true;
}

void IRLock::Swap(IRLock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IRLock::InternalSwap(IRLock* other) {
  using std::swap;
  swap(time_usec_, other->time_usec_);
  swap(signature_, other->signature_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(size_x_, other->size_x_);
  swap(q_w_, other->q_w_);
  swap(q_x_, other->q_x_);
  swap(q_y_, other->q_y_);
  swap(q_z_, other->q_z_);
  swap(attitude_q_w_, other->attitude_q_w_);
  swap(attitude_q_x_, other->attitude_q_x_);
  swap(attitude_q_y_, other->attitude_q_y_);
  swap(attitude_q_z_, other->attitude_q_z_);
  swap(size_y_, other->size_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IRLock::GetMetadata() const {
  protobuf_IRLock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IRLock_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace sensor_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensor_msgs::msgs::IRLock* Arena::CreateMaybeMessage< ::sensor_msgs::msgs::IRLock >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::msgs::IRLock >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
