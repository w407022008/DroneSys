// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Odometry.proto

#include "Odometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_quaternion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_quaternion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
}  // namespace protobuf_quaternion_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace nav_msgs {
namespace msgs {
class OdometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odometry>
      _instance;
} _Odometry_default_instance_;
}  // namespace msgs
}  // namespace nav_msgs
namespace protobuf_Odometry_2eproto {
static void InitDefaultsOdometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nav_msgs::msgs::_Odometry_default_instance_;
    new (ptr) ::nav_msgs::msgs::Odometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nav_msgs::msgs::Odometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Odometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOdometry}, {
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_quaternion_2eproto::scc_info_Quaternion.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Odometry.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, time_usec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, pose_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nav_msgs::msgs::Odometry, velocity_covariance_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::nav_msgs::msgs::Odometry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nav_msgs::msgs::_Odometry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Odometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016Odometry.proto\022\rnav_msgs.msgs\032\020quatern"
      "ion.proto\032\016vector3d.proto\"\223\002\n\010Odometry\022\021"
      "\n\ttime_usec\030\001 \002(\003\022\'\n\010position\030\002 \002(\0132\025.ga"
      "zebo.msgs.Vector3d\022,\n\013orientation\030\003 \002(\0132"
      "\027.gazebo.msgs.Quaternion\022.\n\017linear_veloc"
      "ity\030\004 \002(\0132\025.gazebo.msgs.Vector3d\022/\n\020angu"
      "lar_velocity\030\005 \002(\0132\025.gazebo.msgs.Vector3"
      "d\022\033\n\017pose_covariance\030\006 \003(\002B\002\020\001\022\037\n\023veloci"
      "ty_covariance\030\007 \003(\002B\002\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Odometry.proto", &protobuf_RegisterTypes);
  ::protobuf_quaternion_2eproto::AddDescriptors();
  ::protobuf_vector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Odometry_2eproto
namespace nav_msgs {
namespace msgs {

// ===================================================================

void Odometry::InitAsDefaultInstance() {
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->position_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::gazebo::msgs::Quaternion*>(
      ::gazebo::msgs::Quaternion::internal_default_instance());
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::nav_msgs::msgs::_Odometry_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
void Odometry::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void Odometry::clear_orientation() {
  if (orientation_ != NULL) orientation_->Clear();
  clear_has_orientation();
}
void Odometry::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->Clear();
  clear_has_linear_velocity();
}
void Odometry::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->Clear();
  clear_has_angular_velocity();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry::kTimeUsecFieldNumber;
const int Odometry::kPositionFieldNumber;
const int Odometry::kOrientationFieldNumber;
const int Odometry::kLinearVelocityFieldNumber;
const int Odometry::kAngularVelocityFieldNumber;
const int Odometry::kPoseCovarianceFieldNumber;
const int Odometry::kVelocityCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry::Odometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Odometry_2eproto::scc_info_Odometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav_msgs.msgs.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pose_covariance_(from.pose_covariance_),
      velocity_covariance_(from.velocity_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::gazebo::msgs::Vector3d(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::gazebo::msgs::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::gazebo::msgs::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  time_usec_ = from.time_usec_;
  // @@protoc_insertion_point(copy_constructor:nav_msgs.msgs.Odometry)
}

void Odometry::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_usec_) -
      reinterpret_cast<char*>(&position_)) + sizeof(time_usec_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:nav_msgs.msgs.Odometry)
  SharedDtor();
}

void Odometry::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odometry::descriptor() {
  ::protobuf_Odometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Odometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odometry& Odometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Odometry_2eproto::scc_info_Odometry.base);
  return *internal_default_instance();
}


void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:nav_msgs.msgs.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_covariance_.Clear();
  velocity_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
  }
  time_usec_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Odometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav_msgs.msgs.Odometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Quaternion orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d linear_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d angular_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pose_covariance = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pose_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_pose_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float velocity_covariance = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_velocity_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav_msgs.msgs.Odometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav_msgs.msgs.Odometry)
  return false;
#undef DO_
}

void Odometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav_msgs.msgs.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required .gazebo.msgs.Vector3d position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position(), output);
  }

  // required .gazebo.msgs.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_orientation(), output);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_linear_velocity(), output);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_angular_velocity(), output);
  }

  // repeated float pose_covariance = 6 [packed = true];
  if (this->pose_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _pose_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->pose_covariance().data(), this->pose_covariance_size(), output);
  }

  // repeated float velocity_covariance = 7 [packed = true];
  if (this->velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _velocity_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->velocity_covariance().data(), this->velocity_covariance_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav_msgs.msgs.Odometry)
}

::google::protobuf::uint8* Odometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nav_msgs.msgs.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_usec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required .gazebo.msgs.Vector3d position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position(), deterministic, target);
  }

  // required .gazebo.msgs.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_orientation(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d linear_velocity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_linear_velocity(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_angular_velocity(), deterministic, target);
  }

  // repeated float pose_covariance = 6 [packed = true];
  if (this->pose_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _pose_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pose_covariance_, target);
  }

  // repeated float velocity_covariance = 7 [packed = true];
  if (this->velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _velocity_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->velocity_covariance_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav_msgs.msgs.Odometry)
  return target;
}

size_t Odometry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:nav_msgs.msgs.Odometry)
  size_t total_size = 0;

  if (has_position()) {
    // required .gazebo.msgs.Vector3d position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (has_orientation()) {
    // required .gazebo.msgs.Quaternion orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (has_linear_velocity()) {
    // required .gazebo.msgs.Vector3d linear_velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  if (has_angular_velocity()) {
    // required .gazebo.msgs.Vector3d angular_velocity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  if (has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  return total_size;
}
size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nav_msgs.msgs.Odometry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);

    // required .gazebo.msgs.Quaternion orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);

    // required .gazebo.msgs.Vector3d linear_velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_velocity_);

    // required .gazebo.msgs.Vector3d angular_velocity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);

    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float pose_covariance = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->pose_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float velocity_covariance = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nav_msgs.msgs.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nav_msgs.msgs.Odometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nav_msgs.msgs.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nav_msgs.msgs.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_covariance_.MergeFrom(from.pose_covariance_);
  velocity_covariance_.MergeFrom(from.velocity_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::gazebo::msgs::Vector3d::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation()->::gazebo::msgs::Quaternion::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angular_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      time_usec_ = from.time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Odometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nav_msgs.msgs.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nav_msgs.msgs.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_linear_velocity()) {
    if (!this->linear_velocity_->IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  return true;
}

void Odometry::Swap(Odometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  pose_covariance_.InternalSwap(&other->pose_covariance_);
  velocity_covariance_.InternalSwap(&other->velocity_covariance_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(time_usec_, other->time_usec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  protobuf_Odometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Odometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace nav_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nav_msgs::msgs::Odometry* Arena::CreateMaybeMessage< ::nav_msgs::msgs::Odometry >(Arena* arena) {
  return Arena::CreateInternal< ::nav_msgs::msgs::Odometry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
